@prefix sh:    <http://www.w3.org/ns/shacl#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix occp:  <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#> .
@prefix time:  <http://www.w3.org/2006/time#> .
@prefix osh:   <http://www.occpshape.de/shape#> .

#################################################################
#    SHACL Shapes
#################################################################

### GENERAL SHACL SHAPES

    osh:GeneralDatePropertyShape a sh:PropertyShape ;
        sh:path ( occp:hasActualTime occp:hasEstimatedTime ) ;
        sh:datatype xsd:date ;
        sh:message "Dates must be in YYYY-MM-DD format."@en ;
        sh:severity sh:Violation .

    osh:GeneralTimeShape a sh:NodeShape ;
        sh:targetClass time:TemporalEntity ;
        sh:property [
            sh:path occp:hasActualBeginning ;
            sh:class time:Instant ;
            sh:maxCount 1 ;
            sh:message "Each entity must have at most one actual beginning via 'occp:hasActualBeginning'."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path occp:hasActualEnd ;
            sh:class time:Instant ;
            sh:maxCount 1 ;
            sh:message "Each entity must have at most one actual end via 'occp:hasActualEnd'."@en ;
            sh:severity sh:Violation ;
        ] .

    osh:PhaseTimeExistenceShape a sh:NodeShape ;
        sh:targetClass occp:Phase ;
        sh:or (
            # Case 1: Actual Beginning with Estimated or Actual End
            [ sh:and (
                [ sh:property [
                    sh:path occp:hasActualBeginning ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                ] ]
                [ sh:or (
                    [ sh:property [
                            sh:path occp:hasActualEnd ;
                            sh:minCount 1 ;
                            sh:maxCount 1 ;
                        ] ]
                    [ sh:property [
                            sh:path occp:hasEstimatedEnd ;
                            sh:minCount 1 ;
                        ] ]
                ) ]
            ) ]
            # Case 2: Estimated Beginning with Estimated End
            [ sh:and (
                [ sh:property [
                        sh:path occp:hasEstimatedBeginning ;
                        sh:minCount 1 ;
                    ] ]
                [ sh:property [
                        sh:path occp:hasEstimatedEnd ;
                        sh:minCount 1 ;
                        sh:message "A phase with an estimated beginning must have an estimated end."@en ;
                    ] ]
            ) ]
        ) ;
        sh:message "A phase, if it has an actual beginning, must have an actual or estimated end. If it has an estimated beginning, it must have an estimated end."@en ;
        sh:severity sh:Violation .

    osh:PhaseTimeOrderShape a sh:NodeShape ;
        sh:targetClass occp:Phase ;
        # Ensure each phase belongs to a process
        sh:property [
            sh:path occp:belongsToProcess ;
            sh:class occp:Process ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:Phase' must belong to exactly one 'occp:Process' via 'occp:belongsToProcess'."@en ;
            sh:severity sh:Violation
        ] ;
        # Ensure beginning is before end (if both exist)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this ?timeStart ?timeEnd
                WHERE {
                    $this occp:hasActualBeginning ?start .
                    $this occp:hasActualEnd ?end .
                    { ?start occp:hasActualTime ?timeStart . }
                    { ?end occp:hasActualTime ?timeEnd . }
                    FILTER (?timeStart >= ?timeEnd)
                }
            """ ;
            sh:message "Phases in general: Beginning time (occp:hasActualBeginning) must be before end time (occp:hasActualEnd)."@en ;
            sh:severity sh:Violation
        ] .

    osh:InstantTimeShape a sh:NodeShape ;
        sh:targetClass time:Instant ;
        sh:property [
            sh:path [ sh:alternativePath ( occp:hasActualTime occp:hasEstimatedTime ) ] ;
            sh:qualifiedValueShape [
                sh:datatype xsd:date ;
            ] ;
            sh:qualifiedMinCount 1 ;
            sh:message "Each instant must have at least one timestamp (either 'occp:hasActualTime' or 'occp:hasEstimatedTime') of type xsd:date."@en ;
            sh:severity sh:Violation ;
        ] ;
        sh:property [
            sh:path occp:hasActualTime ;
            sh:datatype xsd:date ;
            sh:maxCount 1 ;
            sh:message "Each instant must have at most one actual timestamp via occp:hasActualTime of type xsd:date."@en ;
            sh:severity sh:Violation ;
        ] .

    osh:CycleShape a sh:NodeShape ;
        sh:targetClass occp:Cycle ;
        sh:property [
            sh:path occp:belongsToProcess ;
            sh:class occp:Process ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:Cycle' must belong to exactly one 'occp:Process' via 'occp:belongsToProcess'."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for hasCycleNumber
        sh:property [
            sh:path occp:hasCycleNumber ;
            sh:datatype xsd:integer ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:minInclusive 1 ;
            sh:message "Each 'occp:Cycle' must specify exactly one positive integer via 'occp:hasCycleNumber' to indicate the number of iterations."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for hasActualBeginning
        sh:property [
            sh:path occp:hasActualBeginning ;
            sh:class time:Instant ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:Cycle' must have exactly one 'occp:hasActualBeginning' referencing a 'time:Instant' to mark its start."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for end (at least one end: actual or estimated, but max 1 actualEnd)
        sh:property [
            sh:path occp:hasActualEnd ;
            sh:class time:Instant ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:Cycle' must have at most one 'occp:hasActualEnd' referencing a 'time:Instant'."@en ;
            sh:severity sh:Violation
        ] ;
        sh:or (
            [ sh:property [ sh:path occp:hasActualEnd ; sh:minCount 1 ; sh:class time:Instant ] ]
            [ sh:property [ sh:path occp:hasEstimatedEnd ; sh:minCount 1 ; sh:class time:Instant ] ]
        ) ;
        sh:message "Each 'occp:Cycle' must have at least one end (either 'occp:hasActualEnd' or 'occp:hasEstimatedEnd') referencing a 'time:Instant'."@en ;
        sh:severity sh:Violation .

    osh:CycleAShape a sh:NodeShape ;
        sh:targetClass occp:CycleA_PlanningReview ;
        sh:property [
            sh:path occp:belongsToProcess ;
            sh:class occp:Process ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:CycleA_PlanningReview' must belong to exactly one 'occp:Process' via 'occp:belongsToProcess'."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for hasActualBeginning
        sh:property [
            sh:path occp:hasActualBeginning ;
            sh:class occp:ReviewStart ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:CycleA_PlanningReview' must have exactly one actual beginning via 'occp:hasActualBeginning' referencing 'occp:ReviewStart'."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for end (at least one end: actual or estimated, restricted to ReviewApproval or ReviewRejection, max 1 actualEnd)
        sh:property [
            sh:path occp:hasActualEnd ;
            sh:or (
                [ sh:class occp:ReviewApproval ]
                [ sh:class occp:ReviewRejection ]
            ) ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:CycleA_PlanningReview' must have at most one 'occp:hasActualEnd' referencing 'occp:ReviewApproval' or 'occp:ReviewRejection'."@en ;
            sh:severity sh:Violation
        ] ;
        sh:property [
            sh:path [ sh:alternativePath ( occp:hasActualEnd occp:hasEstimatedEnd ) ] ;
            sh:or (
                [ sh:class occp:ReviewApproval ]
                [ sh:class occp:ReviewRejection ]
            ) ;
            sh:minCount 1 ;  
            sh:message "Each 'occp:CycleA_PlanningReview' must have at least one end (either 'occp:hasActualEnd' or 'occp:hasEstimatedEnd') referencing 'occp:ReviewApproval' or 'occp:ReviewRejection'."@en ;
            sh:severity sh:Violation
        ] .

    osh:ProcessShape a sh:NodeShape ;
        sh:targetClass occp:Process ;
        # Constraint for hasProcessID
        sh:property [
            sh:path occp:hasProcessID ;
            sh:datatype xsd:string ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:Process' must have exactly one 'occp:hasProcessID' of type xsd:string to provide a unique identifier."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for hasPhase (process contains phases)
        sh:property [
            sh:path occp:hasPhase ;
            sh:minCount 1 ;
            sh:message "Each 'occp:Process' must consist of at least two instances of 'occp:Phase' connected via 'occp:hasPhase'."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for isInPhase (process is contained in exactly one phase, if present)
        sh:property [
            sh:path occp:isInPhase ;
            sh:class occp:Phase ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:Process' must be embedded in at most one 'occp:Phase' via 'occp:isInPhase'."@en ;
            sh:severity sh:Violation
        ] ;
        # Removed shapes for beginning and end, because processes contain phases, which have beginnings and ends (should suffice)
        # Prevent inception (process cannot be in a phase it contains)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                SELECT $this
                WHERE {
                    $this occp:isInPhase ?phase .
                    $this occp:hasPhase ?phase .
                }
            """ ;
            sh:message "For 'occp:Process': A process cannot be embedded in a phase (occp:isInPhase) that it also contains (occp:hasPhase)."@en ;
            sh:severity sh:Violation
        ] ;
        # Each phase can only occur once within a process - except for Phase D - Usage !!   
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                SELECT $this ?phaseType
                WHERE {
                    $this occp:hasPhase ?phase1 .
                    $this occp:hasPhase ?phase2 .
                    FILTER (?phase1 != ?phase2)
                    ?phase1 a ?phaseType .
                    ?phase2 a ?phaseType .
                    FILTER (?phaseType != occp:Phase && ?phaseType NOT IN (occp:PhaseD_Usage, occp:PhaseE_Warranty, occp:PhaseF_DesignLife, occp:PhaseK_Damage, occp:PhaseL_Repair))  # Exclude PhaseD_Usage & PhaseE_Warranty & PhaseK_Damage & PhaseL_Repair
                }
                GROUP BY $this ?phaseType
                HAVING (COUNT(?phase1) > 1)
            """ ;
            sh:message "For 'occp:Process': Each specific phase type (except 'occp:PhaseD_Usage', 'occp:PhaseE_Warranty', 'occp:PhaseK_Damage' and 'occp:PhaseL_Repair') must appear at most once within the process via 'occp:hasPhase'."@en ;
            sh:severity sh:Violation
        ] .

### PHASE RELATED SHACL SHAPES

    osh:ShapeOfPhaseA a sh:NodeShape ;
        sh:targetClass occp:PhaseA_Planning ;
        # Ensure phase belongs to a process
        sh:property [
            sh:path occp:belongsToProcess ;
            sh:class occp:Process ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseA_Planning' must belong to exactly one 'occp:Process' via 'occp:belongsToProcess'."@en ;
            sh:severity sh:Violation
        ] ;
        # Ensure PhaseA begins before PhaseB_Review in the same process (if PhaseB exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualBeginning ?startInstantA .
                    ?startInstantA occp:hasActualTime ?startA .
                    ?phaseB a occp:PhaseB_Review .
                    ?phaseB occp:belongsToProcess ?process .
                    ?phaseB occp:hasActualBeginning ?startInstantB .
                    ?startInstantB occp:hasActualTime ?startB .
                    FILTER (?startA >= ?startB)
                }
            """ ;
            sh:message "For 'occp:PhaseA_Planning': Actual beginning time (occp:hasActualBeginning) must be before 'occp:PhaseB_Review' in the same process."@en ;
            sh:severity sh:Violation
        ] ;
        # Ensure PhaseA begins before PhaseC_Construction in the same process (if PhaseC exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualBeginning ?startInstantA .
                    ?startInstantA occp:hasActualTime ?startA .
                    ?phaseC a occp:PhaseC_Construction .
                    ?phaseC occp:belongsToProcess ?process .
                    ?phaseC occp:hasActualBeginning ?startInstantC .
                    ?startInstantC occp:hasActualTime ?startC .
                    FILTER (?startA >= ?startC)
                }
            """ ;
            sh:message "For 'occp:PhaseA_Planning': Actual beginning time (occp:hasActualBeginning) must be before 'occp:PhaseC_Construction' in the same process."@en ;
            sh:severity sh:Violation
        ] ;
        # Ensure PhaseA ends before PhaseC_Construction begins in the same process (if PhaseC exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualEnd ?endInstantA .
                    ?endInstantA occp:hasActualTime ?endA .
                    ?phaseC a occp:PhaseC_Construction .
                    ?phaseC occp:belongsToProcess ?process .
                    ?phaseC occp:hasActualBeginning ?startInstantC .
                    ?startInstantC occp:hasActualTime ?startC .
                    FILTER (?endA >= ?startC)
                }
            """ ;
            sh:message "For 'occp:PhaseA_Planning': Actual end time (occp:hasActualEnd) must be before 'occp:PhaseC_Construction' begins in the same process."@en ;
            sh:severity sh:Warning
        ] ;
        # Ensure PhaseA ends before CompletionOfConstruction in the same process (if Completion exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualEnd ?endInstantA .
                    ?endInstantA occp:hasActualTime ?endA .
                    ?completion a occp:CompletionOfConstruction .
                    ?completion occp:hasPhase ?phase .
                    ?phase occp:belongsToProcess ?process .
                    ?completion occp:hasActualTime ?timeC .
                    FILTER (?endA >= ?timeC)
                }
            """ ;
            sh:message "For 'occp:PhaseA_Planning': Actual end time (occp:hasActualEnd) must be before 'occp:CompletionOfConstruction' in the same process."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for hasActualBeginning
        sh:property [
            sh:path occp:hasActualBeginning ;
            sh:class occp:BeginningOfPlanning ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseA_Planning' must have at most one actual beginning via 'occp:hasActualBeginning' referencing 'occp:BeginningOfPlanning'."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for hasActualEnd
        sh:property [
            sh:path occp:hasActualEnd ;
            sh:or (
                [ sh:class occp:ReviewApproval ]
                [ sh:class occp:CompletionOfPlanning ]
            ) ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseA_Planning' must have at most one actual end via 'occp:hasActualEnd' referencing 'occp:ReviewApproval' or 'occp:CompletionOfPlanning'."@en ;
            sh:severity sh:Violation
        ] .

    osh:ShapeOfPhaseB a sh:NodeShape ;
        sh:targetClass occp:PhaseB_Review ;
        # Ensure phase belongs to a process
        sh:property [
            sh:path occp:belongsToProcess ;
            sh:class occp:Process ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseB_Review' must belong to exactly one 'occp:Process' via 'occp:belongsToProcess'."@en ;
            sh:severity sh:Violation
        ] ;
        # Ensure PhaseB begins before PhaseC_Construction in the same process (if PhaseC exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualBeginning ?startInstantB .
                    ?startInstantB occp:hasActualTime ?startB .
                    ?phaseC a occp:PhaseC_Construction .
                    ?phaseC occp:belongsToProcess ?process .
                    ?phaseC occp:hasActualBeginning ?startInstantC .
                    ?startInstantC occp:hasActualTime ?startC .
                    FILTER (?startB >= ?startC)
                }
            """ ;
            sh:message "For 'occp:PhaseB_Review': Actual beginning time (occp:hasActualBeginning) must be before 'occp:PhaseC_Construction' in the same process."@en ;
            sh:severity sh:Violation
        ] ;
        # Ensure PhaseB ends before PhaseC_Construction begins in the same process (if PhaseC exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualEnd ?endInstantB .
                    ?endInstantB occp:hasActualTime ?endB .
                    ?phaseC a occp:PhaseC_Construction .
                    ?phaseC occp:belongsToProcess ?process .
                    ?phaseC occp:hasActualBeginning ?startInstantC .
                    ?startInstantC occp:hasActualTime ?startC .
                    FILTER (?endB >= ?startC)
                }
            """ ;
            sh:message "For 'occp:PhaseB_Review': Actual end time (occp:hasActualEnd) must be before 'occp:PhaseC_Construction' begins in the same process."@en ;
            sh:severity sh:Warning
        ] ;
        # Ensure PhaseB ends before or with CompletionOfPlanning in the same process (if Completion exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualEnd ?endInstantB .
                    ?endInstantB occp:hasActualTime ?endB .
                    ?completion a occp:CompletionOfPlanning .
                    ?completion occp:hasPhase ?phase .
                    ?phase occp:belongsToProcess ?process .
                    ?completion occp:hasActualTime ?timeCOP .
                    FILTER (?endB > ?timeCOP)
                }
            """ ;
            sh:message "For 'occp:PhaseB_Review': Actual end time (occp:hasActualEnd) must be before or with 'occp:CompletionOfPlanning' in the same process."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for hasActualBeginning
        sh:property [
            sh:path occp:hasActualBeginning ;
            sh:class occp:ReviewStart ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseB_Review' must have at most one actual beginning via 'occp:hasActualBeginning' referencing 'occp:ReviewStart'."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for hasActualEnd
        sh:property [
            sh:path occp:hasActualEnd ;
            sh:or (
                [ sh:class occp:ReviewApproval ]
                [ sh:class occp:CompletionOfPlanning ]
            ) ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseB_Review' must have at most one actual end via 'occp:hasActualEnd' referencing 'occp:ReviewApproval' or 'occp:CompletionOfPlanning'."@en ;
            sh:severity sh:Violation
        ] .

    osh:ShapeOfTransitionA a sh:NodeShape ;
        sh:targetClass occp:CompletionOfPlanning ;
        # Ensure transition belongs to exactly one process
        sh:property [
            sh:path occp:belongsToProcess ;
            sh:class occp:Process ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:CompletionOfPlanning' must belong to exactly one 'occp:Process' via 'occp:belongsToProcess'."@en ;
            sh:severity sh:Violation
        ] ;
        # Ensure CompletionOfPlanning occurs before BeginOfTenderingProcess in the same process (if BeginOfTenderingProcess exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualTime ?timeCOP .
                    ?beginTender a occp:BeginOfTenderingProcess .
                    ?beginTender occp:belongsToProcess ?process .
                    ?beginTender occp:hasActualTime ?startTender .
                    FILTER (?timeCOP >= ?startTender)
                }
            """ ;
            sh:message "For 'occp:CompletionOfPlanning': Actual time (occp:hasActualTime) should occur before 'occp:BeginOfTenderingProcess' in the same process."@en ;
            sh:severity sh:Warning
        ] .

    osh:ShapeOfTransitionB a sh:NodeShape ;
        sh:targetClass occp:BeginOfTenderingProcess ;
        # Ensure transition belongs to exactly one process
        sh:property [
            sh:path occp:belongsToProcess ;
            sh:class occp:Process ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:BeginOfTenderingProcess' must belong to exactly one 'occp:Process' via 'occp:belongsToProcess'."@en ;
            sh:severity sh:Violation
        ] ;
        # Ensure BeginOfTenderingProcess occurs before Submission in the same process (if Submission exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualTime ?startTender .
                    ?submission a occp:Submission .
                    ?submission occp:belongsToProcess ?process .
                    ?submission occp:hasActualTime ?timeSub .
                    FILTER (?startTender >= ?timeSub)
                }
            """ ;
            sh:message "For 'occp:BeginOfTenderingProcess': Actual time (occp:hasActualTime) should occur before 'occp:Submission' in the same process."@en ;
            sh:severity sh:Warning
        ] .

    osh:ShapeOfTransitionC a sh:NodeShape ;
        sh:targetClass occp:Submission ;
        # Ensure transition belongs to exactly one process
        sh:property [
            sh:path occp:belongsToProcess ;
            sh:class occp:Process ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:Submission' must belong to exactly one 'occp:Process' via 'occp:belongsToProcess'."@en ;
            sh:severity sh:Violation
        ] ;
        # Ensure Submission occurs before PhaseC_Construction in the same process (if PhaseC exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualTime ?timeSub .
                    ?phaseC a occp:PhaseC_Construction .
                    ?phaseC occp:belongsToProcess ?process .
                    ?phaseC occp:hasActualBeginning ?startInstantC .
                    ?startInstantC occp:hasActualTime ?startC .
                    FILTER (?timeSub >= ?startC)
                }
            """ ;
            sh:message "For 'occp:Submission': Actual time (occp:hasActualTime) should occur before 'occp:PhaseC_Construction' begins in the same process."@en ;
            sh:severity sh:Warning
        ] .

    osh:ShapeOfPhaseC a sh:NodeShape ;
        sh:targetClass occp:PhaseC_Construction ;
        # Ensure phase belongs to a process
        sh:property [
            sh:path occp:belongsToProcess ;
            sh:class occp:Process ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseC_Construction' must belong to exactly one 'occp:Process' via 'occp:belongsToProcess'."@en ;
            sh:severity sh:Violation
        ] ;
        # Ensure PhaseC occurs after CompletionOfPlanning in the same process (if Completion exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualBeginning ?startInstantC .
                    ?startInstantC occp:hasActualTime ?startC .
                    ?completion a occp:CompletionOfPlanning .
                    ?completion occp:belongsToProcess ?process .
                    ?completion occp:hasActualTime ?timeCOP .
                    FILTER (?startC <= ?timeCOP)
                }
            """ ;
            sh:message "For 'occp:PhaseC_Construction': Actual beginning time (occp:hasActualBeginning) should occur after 'occp:CompletionOfPlanning' in the same process."@en ;
            sh:severity sh:Warning
        ] ;
        # Ensure PhaseC occurs after Submission in the same process (if Submission exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualBeginning ?startInstantC .
                    ?startInstantC occp:hasActualTime ?startC .
                    ?submission a occp:Submission .
                    ?submission occp:belongsToProcess ?process .
                    ?submission occp:hasActualTime ?timeSub .
                    FILTER (?startC <= ?timeSub)
                }
            """ ;
            sh:message "For 'occp:PhaseC_Construction': Actual beginning time (occp:hasActualBeginning) should occur after 'occp:Submission' in the same process."@en ;
            sh:severity sh:Warning
        ] ;
        # Constraint for hasActualBeginning
        sh:property [
            sh:path occp:hasActualBeginning ;
            sh:class occp:ConstructionStart ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseC_Construction' must have at most one actual beginning via 'occp:hasActualBeginning' referencing 'occp:ConstructionStart'."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for hasActualEnd
        sh:property [
            sh:path occp:hasActualEnd ;
            sh:or (
                [ sh:class occp:ConstructionAcceptance ]
                [ sh:class occp:CompletionOfConstruction ]
            ) ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseC_Construction' must have at most one actual end via 'occp:hasActualEnd' referencing 'occp:ConstructionAcceptance' or 'occp:CompletionOfConstruction'."@en ;
            sh:severity sh:Violation
        ] .

    osh:ShapeOfTransitionD a sh:NodeShape ;
        sh:targetClass occp:CompletionOfConstruction ;
        # Ensure transition belongs to exactly one process
        sh:property [
            sh:path occp:belongsToProcess ;
            sh:class occp:Process ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:CompletionOfConstruction' must belong to exactly one 'occp:Process' via 'occp:belongsToProcess'."@en ;
            sh:severity sh:Violation
        ] ;
        # Ensure CompletionOfConstruction occurs after CompletionOfPlanning in the same process (if CompletionOfPlanning exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualTime ?timeCOC .
                    ?completionPlanning a occp:CompletionOfPlanning .
                    ?completionPlanning occp:belongsToProcess ?process .
                    ?completionPlanning occp:hasActualTime ?timeCOP .
                    FILTER (?timeCOC <= ?timeCOP)
                }
            """ ;
            sh:message "For 'occp:CompletionOfConstruction': Actual time (occp:hasActualTime) should occur after 'occp:CompletionOfPlanning' in the same process."@en ;
            sh:severity sh:Warning
        ] ;
        # Ensure CompletionOfConstruction occurs before PhaseD_Usage in the same process (if PhaseD exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualTime ?timeCOC .
                    ?phaseD a occp:PhaseD_Usage .
                    ?phaseD occp:belongsToProcess ?process .
                    ?phaseD occp:hasActualBeginning ?startInstantD .
                    ?startInstantD occp:hasActualTime ?startD .
                    FILTER (?timeCOC >= ?startD)
                }
            """ ;
            sh:message "For 'occp:CompletionOfConstruction': Actual time (occp:hasActualTime) should occur before 'occp:PhaseD_Usage' begins in the same process."@en ;
            sh:severity sh:Warning
        ] ;
        # Ensure CompletionOfConstruction occurs before PhaseM_Deconstruction in the same process (if PhaseM exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualTime ?timeCOC .
                    ?phaseM a occp:PhaseM_Deconstruction .
                    ?phaseM occp:belongsToProcess ?process .
                    ?phaseM occp:hasActualBeginning ?startInstantM .
                    ?startInstantM occp:hasActualTime ?startM .
                    FILTER (?timeCOC >= ?startM)
                }
            """ ;
            sh:message "For 'occp:CompletionOfConstruction': Actual time (occp:hasActualTime) should occur before 'occp:PhaseM_Deconstruction' begins in the same process."@en ;
            sh:severity sh:Warning
        ] .

    osh:ShapeOfPhaseD a sh:NodeShape ;
        sh:targetClass occp:PhaseD_Usage ;
        # Ensure phase belongs to exactly one process
        sh:property [
            sh:path occp:belongsToProcess ;
            sh:class occp:Process ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseD_Usage' must belong to exactly one 'occp:Process' via 'occp:belongsToProcess'."@en ;
            sh:severity sh:Violation
        ] ;
        # Ensure PhaseD occurs after CompletionOfConstruction in the same process (if Completion exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualBeginning ?startInstantD .
                    ?startInstantD occp:hasActualTime ?startD .
                    ?completionC a occp:CompletionOfConstruction .
                    ?completionC occp:belongsToProcess ?process .
                    ?completionC occp:hasActualTime ?timeCOC .
                    FILTER (?startD <= ?timeCOC)
                }
            """ ;
            sh:message "For 'occp:PhaseD_Usage': Actual beginning time (occp:hasActualBeginning) should occur after 'occp:CompletionOfConstruction' in the same process."@en ;
            sh:severity sh:Warning
        ] ;
        # Ensure PhaseD ends before PhaseM_Deconstruction in the same process (if PhaseM exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualEnd ?endInstantD .
                    ?endInstantD occp:hasActualTime ?endD .
                    ?phaseM a occp:PhaseM_Deconstruction .
                    ?phaseM occp:belongsToProcess ?process .
                    ?phaseM occp:hasActualBeginning ?startInstantM .
                    ?startInstantM occp:hasActualTime ?startM .
                    FILTER (?endD >= ?startM)
                }
            """ ;
            sh:message "For 'occp:PhaseD_Usage': Actual end time (occp:hasActualEnd) should end before 'occp:PhaseM_Deconstruction' begins in the same process. We don’t want anyone to get hurt, do we?"@en ;
            sh:severity sh:Warning
        ] ;
        # Constraint for hasActualBeginning
        sh:property [
            sh:path occp:hasActualBeginning ;
            sh:or (
                [ sh:class occp:UsageStart ]
                [ sh:class occp:UsageChange ]
            ) ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseD_Usage' must have at most one actual beginning via 'occp:hasActualBeginning' referencing 'occp:UsageStart' or 'occp:UsageChange'."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for hasActualEnd
        sh:property [
            sh:path occp:hasActualEnd ;
            sh:or (
                [ sh:class occp:UsageEnd ]
                [ sh:class occp:UsageChange ]
            ) ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseD_Usage' must have at most one actual end via 'occp:hasActualEnd' referencing 'occp:UsageEnd' or 'occp:UsageChange'."@en ;
            sh:severity sh:Violation
        ] .

    osh:ShapeOfPhaseE a sh:NodeShape ;
        sh:targetClass occp:PhaseE_Warranty ;
        # Ensure phase belongs to exactly one process
        sh:property [
            sh:path occp:belongsToProcess ;
            sh:class occp:Process ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseE_Warranty' must belong to exactly one 'occp:Process' via 'occp:belongsToProcess'."@en ;
            sh:severity sh:Violation
        ] ;
        # Ensure PhaseE occurs after CompletionOfConstruction in the same process (if CompletionOfConstruction exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualBeginning ?startInstantE .
                    ?startInstantE occp:hasActualTime ?startE .
                    ?completion a occp:CompletionOfConstruction .
                    ?completion occp:belongsToProcess ?process .
                    ?completion occp:hasActualTime ?timeCOC .
                    FILTER (?startE <= ?timeCOC)
                }
            """ ;
            sh:message "For 'occp:PhaseE_Warranty': Actual beginning time (occp:hasActualBeginning) should occur after 'occp:CompletionOfConstruction' in the same process."@en ;
            sh:severity sh:Warning
        ] ;
        # Constraint for hasActualBeginning
        sh:property [
            sh:path occp:hasActualBeginning ;
            sh:or (
                [ sh:class occp:WarrantyStart ]
                [ sh:class occp:WarrantyChange ]
            ) ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseE_Warranty' must have at most one actual beginning via 'occp:hasActualBeginning' referencing 'occp:WarrantyStart' or 'occp:WarrantyChange'."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for hasActualEnd
        sh:property [
            sh:path occp:hasActualEnd ;
            sh:or (
                [ sh:class occp:WarrantyEnd ]
                [ sh:class occp:WarrantyChange ]
            ) ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseE_Warranty' must have at most one actual end via 'occp:hasActualEnd' referencing 'occp:WarrantyEnd' or 'occp:WarrantyChange'."@en ;
            sh:severity sh:Violation
        ] .

    osh:ShapeOfPhaseF a sh:NodeShape ;
        sh:targetClass occp:PhaseF_DesignLife ;
        # Ensure phase belongs to exactly one process
        sh:property [
            sh:path occp:belongsToProcess ;
            sh:class occp:Process ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseF_DesignLife' must belong to exactly one 'occp:Process' via 'occp:belongsToProcess'."@en ;
            sh:severity sh:Violation
        ] ;
        # Ensure PhaseF occurs after CompletionOfConstruction in the same process (if Completion exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualBeginning ?startInstantF .
                    ?startInstantF occp:hasActualTime ?startF .
                    ?completion a occp:CompletionOfConstruction .
                    ?completion occp:belongsToProcess ?process .
                    ?completion occp:hasActualTime ?timeCOC .
                    FILTER (?startF <= ?timeCOC)
                }
            """ ;
            sh:message "For 'occp:PhaseF_DesignLife': Actual beginning time (occp:hasActualBeginning) should occur after 'occp:CompletionOfConstruction' in the same process."@en ;
            sh:severity sh:Warning
        ] ;
        # Ensure PhaseF begins before or with PhaseD_Usage in the same process (if PhaseD exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualBeginning ?startInstantF .
                    ?startInstantF occp:hasActualTime ?startF .
                    ?phaseD a occp:PhaseD_Usage .
                    ?phaseD occp:belongsToProcess ?process .
                    ?phaseD occp:hasActualBeginning ?startInstantD .
                    ?startInstantD occp:hasActualTime ?startD .
                    FILTER (?startF > ?startD)
                }
            """ ;
            sh:message "For 'occp:PhaseF_DesignLife': Actual beginning time (occp:hasActualBeginning) should begin before or with 'occp:PhaseD_Usage' in the same process."@en ;
            sh:severity sh:Warning
        ] ;
        # Ensure PhaseF ends before PhaseM_Deconstruction begins in the same process (if PhaseM exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualEnd ?endInstantF .
                    ?endInstantF occp:hasActualTime ?endF .
                    ?phaseM a occp:PhaseM_Deconstruction .
                    ?phaseM occp:belongsToProcess ?process .
                    ?phaseM occp:hasActualBeginning ?startInstantM .
                    ?startInstantM occp:hasActualTime ?startM .
                    FILTER (?endF >= ?startM)
                }
            """ ;
            sh:message "For 'occp:PhaseF_DesignLife': Actual end time (occp:hasActualEnd) should occur before 'occp:PhaseM_Deconstruction' begins in the same process."@en ;
            sh:severity sh:Warning
        ] ;
        # Constraint for hasActualBeginning
        sh:property [
            sh:path occp:hasActualBeginning ;
            sh:or (
                [ sh:class occp:DesignLifeStart ]
                [ sh:class occp:DesignLifeChange ]
            ) ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseF_DesignLife' must have at most one actual beginning via 'occp:hasActualBeginning' referencing 'occp:DesignLifeStart' or 'occp:DesignLifeChange'."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for hasActualEnd
        sh:property [
            sh:path occp:hasActualEnd ;
            sh:or (
                [ sh:class occp:DesignLifeEnd ]
                [ sh:class occp:DesignLifeChange ]
            ) ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseF_DesignLife' must have at most one actual end via 'occp:hasActualEnd' referencing 'occp:DesignLifeEnd' or 'occp:DesignLifeChange'."@en ;
            sh:severity sh:Violation
        ] .

    osh:ShapeOfPhaseG a sh:NodeShape ;
        sh:targetClass occp:PhaseG_Inspection ;
        # Ensure phase belongs to a process
        sh:property [
            sh:path occp:belongsToProcess ;
            sh:class occp:Process ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseG_Inspection' must belong to exactly one 'occp:Process' via 'occp:belongsToProcess'."@en ;
            sh:severity sh:Violation
        ] ;
        # Ensure PhaseG begins with or after UsageStart in the same process (if UsageStart exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualBeginning ?startInstantG .
                    ?startInstantG occp:hasActualTime ?startG .
                    ?usageStart a occp:UsageStart .
                    ?usageStart occp:belongsToProcess ?process .
                    ?usageStart occp:hasActualTime ?timeUS .
                    FILTER (?startG < ?timeUS)
                }
            """ ;
            sh:message "For 'occp:PhaseG_Inspection': Actual beginning time (occp:hasActualBeginning) must be with or after 'occp:UsageStart' in the same process."@en ;
            sh:severity sh:Violation
        ] ;
        # Ensure PhaseG occurs after CompletionOfConstruction in the same process (if CompletionOfConstruction exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualBeginning ?startInstantG .
                    ?startInstantG occp:hasActualTime ?startG .
                    ?completion a occp:CompletionOfConstruction .
                    ?completion occp:belongsToProcess ?process .
                    ?completion occp:hasActualTime ?timeCOC .
                    FILTER (?startG <= ?timeCOC)
                }
            """ ;
            sh:message "For 'occp:PhaseG_Inspection': Actual beginning time (occp:hasActualBeginning) should occur after 'occp:CompletionOfConstruction' in the same process."@en ;
            sh:severity sh:Warning
        ] ;
        # Ensure PhaseG occurs before PhaseM_Deconstruction in the same process (if PhaseM exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualEnd ?endInstantG .
                    ?endInstantG occp:hasActualTime ?endG .
                    ?phaseM a occp:PhaseM_Deconstruction .
                    ?phaseM occp:belongsToProcess ?process .
                    ?phaseM occp:hasActualBeginning ?startInstantM .
                    ?startInstantM occp:hasActualTime ?startM .
                    FILTER (?endG >= ?startM)
                }
            """ ;
            sh:message "For 'occp:PhaseG_Inspection': Actual end time (occp:hasActualEnd) should occur before 'occp:PhaseM_Deconstruction' begins in the same process."@en ;
            sh:severity sh:Warning
        ] ;
        # Constraint for hasActualBeginning
        sh:property [
            sh:path occp:hasActualBeginning ;
            sh:class occp:InspectionExecution ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseG_Inspection' must have at most one actual beginning via 'occp:hasActualBeginning' referencing 'occp:InspectionExecution'."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for hasActualEnd
        sh:property [
            sh:path occp:hasActualEnd ;
            sh:class time:Instant ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseG_Inspection' must have at most one actual end via 'occp:hasActualEnd' referencing a 'time:Instant'."@en ;
            sh:severity sh:Violation
        ] .

    osh:ShapeOfPhaseH a sh:NodeShape ;              # Phase H (SpecialEvents) - Special events can occur anytime, so this is to be handled like a super-phase. It can be used to describe or record events that have shaped the landscape like earthquakes in the past, but also events that occur during or after the construction's life cycle.
        sh:targetClass occp:PhaseH_SpecialEvents ;
        # Ensure phase belongs to exactly one process
        sh:property [
            sh:path occp:belongsToProcess ;
            sh:class occp:Process ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseH_SpecialEvents' must belong to exactly one 'occp:Process' via 'occp:belongsToProcess'."@en ;
            sh:severity sh:Violation
        ] ;
        # Ensure each PhaseH has at least one instant to mark specific events
        sh:property [
            sh:path occp:belongsToInstant ;
            sh:class time:Instant ;
            sh:minCount 1 ;
            sh:message "Each 'occp:PhaseH_SpecialEvents' must have at least one instant via 'occp:belongsToInstant' referencing a 'time:Instant' (e.g., 'occp:GeologicalEvent', 'occp:WeatherEvent')."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for hasActualBeginning
        sh:property [
            sh:path occp:hasActualBeginning ;
            sh:class time:Instant ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseH_SpecialEvents' must have at most one actual beginning via 'occp:hasActualBeginning' referencing a 'time:Instant'."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for hasActualEnd
        sh:property [
            sh:path occp:hasActualEnd ;
            sh:class time:Instant ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseH_SpecialEvents' must have at most one actual end via 'occp:hasActualEnd' referencing a 'time:Instant'."@en ;
            sh:severity sh:Violation
        ] .

    osh:ShapeOfPhaseK a sh:NodeShape ;
        sh:targetClass occp:PhaseK_Damage ;
        # Ensure phase belongs to exactly one process
        sh:property [
            sh:path occp:belongsToProcess ;
            sh:class occp:Process ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseK_Damage' must belong to exactly one 'occp:Process' via 'occp:belongsToProcess'."@en ;
            sh:severity sh:Violation
        ] ;
        # Ensure PhaseK occurs after Submission in the same process (if Submission exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualBeginning ?startInstantK .
                    ?startInstantK occp:hasActualTime ?startK .
                    ?submission a occp:Submission .
                    ?submission occp:belongsToProcess ?process .
                    ?submission occp:hasActualTime ?timeSub .
                    FILTER (?startK <= ?timeSub)
                }
            """ ;
            sh:message "For 'occp:PhaseK_Damage': Actual beginning time (occp:hasActualBeginning) should occur after 'occp:Submission' in the same process."@en ;
            sh:severity sh:Warning
        ] ;
        # Ensure PhaseK ends before CompletionOfDeconstruction in the same process (if CompletionOfDeconstruction exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualEnd ?endInstantK .
                    ?endInstantK occp:hasActualTime ?endK .
                    ?completionDec a occp:CompletionOfDeconstruction .
                    ?completionDec occp:belongsToProcess ?process .
                    ?completionDec occp:hasActualTime ?timeCOD .
                    FILTER (?endK >= ?timeCOD)
                }
            """ ;
            sh:message "For 'occp:PhaseK_Damage': Actual end time (occp:hasActualEnd) should occur before 'occp:CompletionOfDeconstruction' in the same process."@en ;
            sh:severity sh:Warning
        ] ;
        # Ensure PhaseK begins before PhaseL_Repair in the same process (if PhaseL exists, with flexibility)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualBeginning ?startInstantK .
                    ?startInstantK occp:hasActualTime ?startK .
                    ?phaseL a occp:PhaseL_Repair .
                    ?phaseL occp:belongsToProcess ?process .
                    ?phaseL occp:hasActualBeginning ?startInstantL .
                    ?startInstantL occp:hasActualTime ?startL .
                    FILTER (?startK >= ?startL)
                }
            """ ;
            sh:message "For 'occp:PhaseK_Damage': Actual beginning time (occp:hasActualBeginning) should occur before 'occp:PhaseL_Repair' begins in the same process, but damage detection during repair is possible."@en ;
            sh:severity sh:Warning
        ] ;
        # Constraint for hasActualBeginning
        sh:property [
            sh:path occp:hasActualBeginning ;
            sh:class occp:DamageDetection ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseK_Damage' must have at most one actual beginning via 'occp:hasActualBeginning' referencing 'occp:DamageDetection'."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for hasActualEnd
        sh:property [
            sh:path occp:hasActualEnd ;
            sh:class occp:DamageRepair ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseK_Damage' must have at most one actual end via 'occp:hasActualEnd' referencing a 'time:Instant'."@en ;
            sh:severity sh:Violation
        ] .

    osh:ShapeOfPhaseL a sh:NodeShape ;
        sh:targetClass occp:PhaseL_Repair ;
        # Ensure phase belongs to exactly one process
        sh:property [
            sh:path occp:belongsToProcess ;
            sh:class occp:Process ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseL_Repair' must belong to exactly one 'occp:Process' via 'occp:belongsToProcess'."@en ;
            sh:severity sh:Violation
        ] ;
        # Ensure PhaseL ends with or after PhaseK_Damage in the same process (if PhaseK exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualEnd ?endInstantL .
                    ?endInstantL occp:hasActualTime ?endL .
                    ?phaseK a occp:PhaseK_Damage .
                    ?phaseK occp:belongsToProcess ?process .
                    ?phaseK occp:hasActualEnd ?endInstantK .
                    ?endInstantK occp:hasActualTime ?endK .
                    FILTER (?endL < ?endK)
                }
            """ ;
            sh:message "For 'occp:PhaseL_Repair': Actual end time (occp:hasActualEnd) must be with or after 'occp:PhaseK_Damage' in the same process."@en ;
            sh:severity sh:Violation
        ] ;
        # Ensure PhaseL occurs after Submission in the same process (if Submission exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualBeginning ?startInstantL .
                    ?startInstantL occp:hasActualTime ?startL .
                    ?submission a occp:Submission .
                    ?submission occp:belongsToProcess ?process .
                    ?submission occp:hasActualTime ?timeSub .
                    FILTER (?startL <= ?timeSub)
                }
            """ ;
            sh:message "For 'occp:PhaseL_Repair': Actual beginning time (occp:hasActualBeginning) should occur after 'occp:Submission' in the same process."@en ;
            sh:severity sh:Warning
        ] ;
        # Ensure PhaseL ends before PhaseM_Deconstruction in the same process (if PhaseM exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualEnd ?endInstantL .
                    ?endInstantL occp:hasActualTime ?endL .
                    ?phaseM a occp:PhaseM_Deconstruction .
                    ?phaseM occp:belongsToProcess ?process .
                    ?phaseM occp:hasActualBeginning ?startInstantM .
                    ?startInstantM occp:hasActualTime ?startM .
                    FILTER (?endL >= ?startM)
                }
            """ ;
            sh:message "For 'occp:PhaseL_Repair': Actual end time (occp:hasActualEnd) should be before 'occp:PhaseM_Deconstruction' begins in the same process."@en ;
            sh:severity sh:Warning
        ] ;
        # Constraint for hasActualBeginning
        sh:property [
            sh:path occp:hasActualBeginning ;
            sh:class occp:RepairStart ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseL_Repair' must have at most one actual beginning via 'occp:hasActualBeginning' referencing 'occp:RepairStart'."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for hasActualEnd
        sh:property [
            sh:path occp:hasActualEnd ;
            sh:class occp:RepairCompletion ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseL_Repair' must have at most one actual end via 'occp:hasActualEnd' referencing 'occp:RepairCompletion'."@en ;
            sh:severity sh:Violation
        ] .

    osh:ShapeOfPhaseM a sh:NodeShape ;
        sh:targetClass occp:PhaseM_Deconstruction ;
        # Ensure phase belongs to exactly one process
        sh:property [
            sh:path occp:belongsToProcess ;
            sh:class occp:Process ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseM_Deconstruction' must belong to exactly one 'occp:Process' via 'occp:belongsToProcess'."@en ;
            sh:severity sh:Violation
        ] ;
        # Ensure PhaseM occurs after CompletionOfConstruction in the same process (if CompletionOfConstruction exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualBeginning ?startInstantM .
                    ?startInstantM occp:hasActualTime ?startM .
                    ?completionC a occp:CompletionOfConstruction .
                    ?completionC occp:belongsToProcess ?process .
                    ?completionC occp:hasActualTime ?timeCOC .
                    FILTER (?startM <= ?timeCOC)
                }
            """ ;
            sh:message "For 'occp:PhaseM_Deconstruction': Actual beginning time (occp:hasActualBeginning) should occur after 'occp:CompletionOfConstruction' in the same process."@en ;
            sh:severity sh:Warning
        ] ;
        # Constraint for hasActualBeginning
        sh:property [
            sh:path occp:hasActualBeginning ;
            sh:class occp:DeconstructionStart ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseM_Deconstruction' must have at most one actual beginning via 'occp:hasActualBeginning' referencing 'occp:DeconstructionStart'."@en ;
            sh:severity sh:Violation
        ] ;
        # Constraint for hasActualEnd
        sh:property [
            sh:path occp:hasActualEnd ;
            sh:class occp:CompletionOfDeconstruction ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:PhaseM_Deconstruction' must have at most one actual end via 'occp:hasActualEnd' referencing 'occp:CompletionOfDeconstruction'."@en ;
            sh:severity sh:Violation
        ] .

    osh:ShapeOfTransitionE a sh:NodeShape ;
        sh:targetClass occp:CompletionOfDeconstruction ;
        # Ensure transition belongs to exactly one process
        sh:property [
            sh:path occp:belongsToProcess ;
            sh:class occp:Process ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:message "Each 'occp:CompletionOfDeconstruction' must belong to exactly one 'occp:Process' via 'occp:belongsToProcess'."@en ;
            sh:severity sh:Violation
        ] ;
        # Ensure CompletionOfDeconstruction occurs after or with the end of PhaseM_Deconstruction in the same process (if PhaseM exists)
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this
                WHERE {
                    $this occp:belongsToProcess ?process .
                    $this occp:hasActualTime ?timeCOD .
                    ?phaseM a occp:PhaseM_Deconstruction .
                    ?phaseM occp:belongsToProcess ?process .
                    ?phaseM occp:hasActualEnd ?endInstantM .
                    ?endInstantM occp:hasActualTime ?endM .
                    FILTER (?timeCOD < ?endM)
                }
            """ ;
            sh:message "For 'occp:CompletionOfDeconstruction': Actual time (occp:hasActualTime) must occur after or with the end of 'occp:PhaseM_Deconstruction' in the same process."@en ;
            sh:severity sh:Violation
        ] .


### INSTANT RELATED SHACL RULES
    ### PHASE A INSTANTS
        # PHASE ASSIGNMENT

            osh:PhaseAInstantShape a sh:NodeShape ;
                sh:targetClass occp:PhaseA_Planning_Instant ;
                sh:property [
                    sh:path occp:belongsToPhase ;
                    sh:class occp:PhaseA_Planning ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:PhaseA_Planning_Instant' must belong to exactly one 'occp:PhaseA_Planning' via 'occp:belongsToPhase'."@en ;
                    sh:severity sh:Violation ;
                ] .

        ### INSTANT SHAPES PHASE A - PLANNING

            osh:BeginningOfPlanningShape a sh:NodeShape ;
                sh:targetClass occp:BeginningOfPlanning ;
                # Instant starts a new Phase A (Planning)
                sh:property [
                    sh:path occp:startsPhase ;
                    sh:class occp:PhaseA_Planning ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:BeginningOfPlanning' must start exactly one 'occp:PhaseA_Planning' via 'occp:startsPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure BeginningOfPlanning occurs before DataProcurement in the same phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:startsPhase ?phase .
                            $this occp:hasActualTime ?timeBOP .
                            ?dataProc a occp:DataProcurement .
                            ?dataProc occp:belongsToPhase ?phase .
                            ?dataProc occp:hasActualTime ?timeDP .
                            FILTER (?timeBOP >= ?timeDP)
                        }
                    """ ;
                    sh:message "For 'occp:BeginningOfPlanning': Actual time (occp:hasActualTime) must occur before 'occp:DataProcurement' in the same 'occp:PhaseA_Planning'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure BeginningOfPlanning occurs before SubmissionToReview in the same phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:startsPhase ?phase .
                            $this occp:hasActualTime ?timeBOP .
                            ?submission a occp:SubmissionToReview .
                            ?submission occp:belongsToPhase ?phase .
                            ?submission occp:hasActualTime ?timeSub .
                            FILTER (?timeBOP >= ?timeSub)
                        }
                    """ ;
                    sh:message "For 'occp:BeginningOfPlanning': Actual time (occp:hasActualTime) should occur before 'occp:SubmissionToReview' in the same 'occp:PhaseA_Planning'."@en ;
                    sh:severity sh:Warning
                ] .

            osh:DataProcurementShape a sh:NodeShape ;
                sh:targetClass occp:DataProcurement ;
                # Instant belongs to a Phase A (Planning)
                sh:property [
                    sh:path occp:belongsToPhase ;
                    sh:class occp:PhaseA_Planning ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:DataProcurement' must belong to exactly one 'occp:PhaseA_Planning' via 'occp:belongsToPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure DataProcurement occurs after BeginningOfPlanning in the same phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToPhase ?phase .
                            $this occp:hasActualTime ?timeDP .
                            ?beginPlanning a occp:BeginningOfPlanning .
                            ?beginPlanning occp:startsPhase ?phase .
                            ?beginPlanning occp:hasActualTime ?timeBOP .
                            FILTER (?timeDP <= ?timeBOP)
                        }
                    """ ;
                    sh:message "For 'occp:DataProcurement': Actual time (occp:hasActualTime) must occur after 'occp:BeginningOfPlanning' in the same 'occp:PhaseA_Planning'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure DataProcurement occurs before SubmissionToReview in the same phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToPhase ?phase .
                            $this occp:hasActualTime ?timeDP .
                            ?submission a occp:SubmissionToReview .
                            ?submission occp:belongsToPhase ?phase .
                            ?submission occp:hasActualTime ?timeSub .
                            FILTER (?timeDP >= ?timeSub)
                        }
                    """ ;
                    sh:message "For 'occp:DataProcurement': Actual time (occp:hasActualTime) should occur before 'occp:SubmissionToReview' in the same 'occp:PhaseA_Planning'."@en ;
                    sh:severity sh:Warning
                ] .

            osh:EditBeforeSubmissionToReviewShape a sh:NodeShape ;
                sh:targetClass occp:EditBeforeSubmissionToReview ;
                # Instant belongs to a Phase A (Planning)
                sh:property [
                    sh:path occp:belongsToPhase ;
                    sh:class occp:PhaseA_Planning ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:EditBeforeSubmissionToReview' must belong to exactly one 'occp:PhaseA_Planning' via 'occp:belongsToPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure EditBeforeSubmissionToReview occurs after BeginningOfPlanning in the same phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToPhase ?phase .
                            $this occp:hasActualTime ?timeEdit .
                            ?beginPlanning a occp:BeginningOfPlanning .
                            ?beginPlanning occp:startsPhase ?phase .
                            ?beginPlanning occp:hasActualTime ?timeBOP .
                            FILTER (?timeEdit <= ?timeBOP)
                        }
                    """ ;
                    sh:message "For 'occp:EditBeforeSubmissionToReview': Actual time (occp:hasActualTime) must occur after 'occp:BeginningOfPlanning' in the same 'occp:PhaseA_Planning'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure EditBeforeSubmissionToReview occurs before SubmissionToReview in the same phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToPhase ?phase .
                            $this occp:hasActualTime ?timeEdit .
                            ?submission a occp:SubmissionToReview .
                            ?submission occp:belongsToPhase ?phase .
                            ?submission occp:hasActualTime ?timeSub .
                            FILTER (?timeEdit >= ?timeSub)
                        }
                    """ ;
                    sh:message "For 'occp:EditBeforeSubmissionToReview': Actual time (occp:hasActualTime) must occur before 'occp:SubmissionToReview' in the same 'occp:PhaseA_Planning'."@en ;
                    sh:severity sh:Violation
                ] .

            osh:SubmissionToReviewShape a sh:NodeShape ;
                sh:targetClass occp:SubmissionToReview ;
                # Instant belongs to a Phase A (Planning)
                sh:property [
                    sh:path occp:belongsToPhase ;
                    sh:class occp:PhaseA_Planning ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:SubmissionToReview' must belong to exactly one 'occp:PhaseA_Planning' via 'occp:belongsToPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure SubmissionToReview occurs after EditBeforeSubmissionToReview in the same phase (if EditBefore exists)
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToPhase ?phase .
                            $this occp:hasActualTime ?timeSub .
                            ?editBefore a occp:EditBeforeSubmissionToReview .
                            ?editBefore occp:belongsToPhase ?phase .
                            ?editBefore occp:hasActualTime ?timeEdit .
                            FILTER (?timeSub <= ?timeEdit)
                        }
                    """ ;
                    sh:message "For 'occp:SubmissionToReview': Actual time (occp:hasActualTime) must occur after 'occp:EditBeforeSubmissionToReview' in the same 'occp:PhaseA_Planning'."@en ;
                    sh:severity sh:Violation
                ] .

            osh:EditAfterSubmissionToReviewShape a sh:NodeShape ;
                sh:targetClass occp:EditAfterSubmissionToReview ;
                # Instant belongs to a Phase A (Planning)
                sh:property [
                    sh:path occp:belongsToPhase ;
                    sh:class occp:PhaseA_Planning ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:EditAfterSubmissionToReview' must belong to exactly one 'occp:PhaseA_Planning' via 'occp:belongsToPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure EditAfterSubmissionToReview occurs after at least one SubmissionToReview in the same phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToPhase ?phase .
                            $this occp:hasActualTime ?timeEdit .
                            FILTER NOT EXISTS {
                                ?submission a occp:SubmissionToReview .
                                ?submission occp:belongsToPhase ?phase .
                                ?submission occp:hasActualTime ?timeSub .
                                FILTER (?timeEdit > ?timeSub)
                            }
                        }
                    """ ;
                    sh:message "For 'occp:EditAfterSubmissionToReview': Actual time (occp:hasActualTime) must occur after at least one 'occp:SubmissionToReview' in the same 'occp:PhaseA_Planning'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure EditAfterSubmissionToReview occurs before CompletionOfPlanning in the same phase (if Completion exists)
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToPhase ?phase .
                            $this occp:hasActualTime ?timeEdit .
                            ?completion a occp:CompletionOfPlanning .
                            ?completion occp:endsPhase ?phase .
                            ?completion occp:hasActualTime ?timeCOP .
                            FILTER (?timeEdit >= ?timeCOP)
                        }
                    """ ;
                    sh:message "For 'occp:EditAfterSubmissionToReview': Actual time (occp:hasActualTime) should occur before 'occp:CompletionOfPlanning' in the same 'occp:PhaseA_Planning'."@en ;
                    sh:severity sh:Warning
                ] .


    ### PHASE B INSTANTS
        # PHASE ASSIGNMENT        
        
            osh:PhaseBInstantShape a sh:NodeShape ;
                sh:targetClass occp:PhaseB_Review_Instant ;
                sh:property [
                    sh:path occp:belongsToPhase ;
                    sh:class occp:PhaseB_Review ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:PhaseB_Review_Instant' must belong to exactly one 'occp:PhaseB_Review' via 'occp:belongsToPhase'."@en ;
                    sh:severity sh:Violation ;
                ] .

        ### INSTANT SHAPES PHASE B - REVIEW

            osh:ReviewStartShape a sh:NodeShape ;
                sh:targetClass occp:ReviewStart ;
                # Instant starts a new Phase B (Review)
                sh:property [
                    sh:path occp:startsPhase ;
                    sh:class occp:PhaseB_Review ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:ReviewStart' must start exactly one 'occp:PhaseB_Review' via 'occp:startsPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Instant starts a CycleA_PlanningReview
                sh:property [
                    sh:path occp:startsCycle ;
                    sh:class occp:CycleA_PlanningReview ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:ReviewStart' must start exactly one 'occp:CycleA_PlanningReview' via 'occp:startsCycle'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure ReviewStart occurs before ReviewApproval in the same phase (if ReviewApproval exists)
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:startsPhase ?phase .
                            $this occp:hasActualTime ?timeRS .
                            ?reviewApproval a occp:ReviewApproval .
                            ?reviewApproval occp:endsPhase ?phase .
                            ?reviewApproval occp:hasActualTime ?timeRA .
                            FILTER (?timeRS >= ?timeRA)
                        }
                    """ ;
                    sh:message "For 'occp:ReviewStart': Actual time (occp:hasActualTime) must occur before 'occp:ReviewApproval' in the same 'occp:PhaseB_Review'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure ReviewStart occurs before ReviewRejection in the same cycle (if ReviewRejection exists)
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:startsCycle ?cycle .
                            $this occp:hasActualTime ?timeRS .
                            ?reviewRejection a occp:ReviewRejection .
                            ?reviewRejection occp:endsCycle ?cycle .
                            ?reviewRejection occp:hasActualTime ?timeRR .
                            FILTER (?timeRS >= ?timeRR)
                        }
                    """ ;
                    sh:message "For 'occp:ReviewStart': Actual time (occp:hasActualTime) must occur before 'occp:ReviewRejection' in the same 'occp:CycleA_PlanningReview'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure ReviewStart occurs after SubmissionToReview in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:startsPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeRS .
                            ?submission a occp:SubmissionToReview .
                            ?submission occp:belongsToProcess ?process .
                            ?submission occp:hasActualTime ?timeSub .
                            FILTER (?timeRS <= ?timeSub)
                        }
                    """ ;
                    sh:message "For 'occp:ReviewStart': Actual time (occp:hasActualTime) must occur after 'occp:SubmissionToReview' in the same process."@en ;
                    sh:severity sh:Violation
                ] .

            osh:ReviewApprovalShape a sh:NodeShape ;
                sh:targetClass occp:ReviewApproval ;
                # Optional: endsPhase for PhaseB_Review, max 1
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        SELECT $this
                        WHERE {
                            $this occp:endsPhase ?phaseB .
                            ?phaseB a occp:PhaseB_Review .
                            FILTER EXISTS {
                                $this occp:endsPhase ?otherPhaseB .
                                ?otherPhaseB a occp:PhaseB_Review .
                                FILTER (?otherPhaseB != ?phaseB)
                            }
                        }
                    """ ;
                    sh:message "Each 'occp:ReviewApproval' must end at most one 'occp:PhaseB_Review' via 'occp:endsPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Optional: endsPhase for PhaseA_Planning, max 1
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        SELECT $this
                        WHERE {
                            $this occp:endsPhase ?phaseA .
                            ?phaseA a occp:PhaseA_Planning .
                            FILTER EXISTS {
                                $this occp:endsPhase ?otherPhaseA .
                                ?otherPhaseA a occp:PhaseA_Planning .
                                FILTER (?otherPhaseA != ?phaseA)
                            }
                        }
                    """ ;
                    sh:message "Each 'occp:ReviewApproval' must end at most one 'occp:PhaseA_Planning' via 'occp:endsPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Optional: endsCycle for CycleA_PlanningReview, max 1
                sh:property [
                    sh:path occp:endsCycle ;
                    sh:class occp:CycleA_PlanningReview ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:ReviewApproval' must end at most one 'occp:CycleA_PlanningReview' via 'occp:endsCycle'."@en ;
                    sh:severity sh:Violation
                ] ;    
                # Ensure ReviewApproval occurs after ReviewStart in the same phase (if ReviewStart exists)
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:endsPhase ?phase .
                            $this occp:hasActualTime ?timeRA .
                            ?reviewStart a occp:ReviewStart .
                            ?reviewStart occp:startsPhase ?phase .
                            ?reviewStart occp:hasActualTime ?timeRS .
                            FILTER (?timeRA <= ?timeRS)
                        }
                    """ ;
                    sh:message "For 'occp:ReviewApproval': Actual time (occp:hasActualTime) must occur after 'occp:ReviewStart' in the same 'occp:PhaseB_Review'."@en ;
                    sh:severity sh:Violation
                ] .

            osh:ReviewRejectionShape a sh:NodeShape ;
                sh:targetClass occp:ReviewRejection ;
                # Instant ends current Cycle A (Planning/Review)
                sh:property [
                    sh:path occp:endsCycle ;
                    sh:class occp:CycleA_PlanningReview ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:ReviewRejection' must end exactly one 'occp:CycleA_PlanningReview' via 'occp:endsCycle'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure ReviewRejection occurs after ReviewStart in the same cycle (if ReviewStart exists)
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:endsCycle ?cycle .
                            $this occp:hasActualTime ?timeRR .
                            ?reviewStart a occp:ReviewStart .
                            ?reviewStart occp:startsCycle ?cycle .
                            ?reviewStart occp:hasActualTime ?timeRS .
                            FILTER (?timeRR <= ?timeRS)
                        }
                    """ ;
                    sh:message "For 'occp:ReviewRejection': Actual time (occp:hasActualTime) must occur after 'occp:ReviewStart' in the same 'occp:CycleA_PlanningReview'."@en ;
                    sh:severity sh:Violation
                ] .

    ### PHASE C INSTANTS
        # PHASE ASSIGNMENT
            osh:PhaseCInstantShape a sh:NodeShape ;
                sh:targetClass occp:PhaseC_Construction_Instant ;
                sh:property [
                    sh:path occp:belongsToPhase ;
                    sh:class occp:PhaseC_Construction ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:PhaseC_Construction_Instant' must belong to exactly one 'occp:PhaseC_Construction' via 'occp:belongsToPhase'."@en ;
                    sh:severity sh:Violation ;
                ] .

        ### INSTANT SHAPES PHASE C - CONSTRUCTION
        
            osh:ConstructionStartShape a sh:NodeShape ;
                sh:targetClass occp:ConstructionStart ;
                # Instant starts a new Phase C (Construction)
                sh:property [
                    sh:path occp:startsPhase ;
                    sh:class occp:PhaseC_Construction ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:ConstructionStart' must start exactly one 'occp:PhaseC_Construction' via 'occp:startsPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure ConstructionStart occurs before ConstructionCompletion in the same phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:startsPhase ?phase .
                            $this occp:hasActualTime ?timeCS .
                            ?completion a occp:ConstructionCompletion .
                            ?completion occp:endsPhase ?phase .
                            ?completion occp:hasActualTime ?timeCC .
                            FILTER (?timeCS >= ?timeCC)
                        }
                    """ ;
                    sh:message "For 'occp:ConstructionStart': Actual time (occp:hasActualTime) must occur before 'occp:ConstructionCompletion' in the same 'occp:PhaseC_Construction'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure ConstructionStart occurs after Submission in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:startsPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeCS .
                            ?submission a occp:Submission .
                            ?submission occp:belongsToProcess ?process .
                            ?submission occp:hasActualTime ?timeSub .
                            FILTER (?timeCS <= ?timeSub)
                        }
                    """ ;
                    sh:message "For 'occp:ConstructionStart': Actual time (occp:hasActualTime) must occur after 'occp:Submission' in the same process."@en ;
                    sh:severity sh:Violation
                ] .

            osh:ConstructionCompletionShape a sh:NodeShape ;
                sh:targetClass occp:ConstructionCompletion ;
                # Instant belongs to a Phase C (Construction)
                sh:property [
                    sh:path occp:belongsToPhase ;
                    sh:class occp:PhaseC_Construction ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:ConstructionCompletion' must belong to exactly one 'occp:PhaseC_Construction' via 'occp:belongsToPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure ConstructionCompletion occurs after ConstructionStart in the same phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToPhase ?phase .
                            $this occp:hasActualTime ?timeCC .
                            ?start a occp:ConstructionStart .
                            ?start occp:startsPhase ?phase .
                            ?start occp:hasActualTime ?timeCS .
                            FILTER (?timeCC <= ?timeCS)
                        }
                    """ ;
                    sh:message "For 'occp:ConstructionCompletion': Actual time (occp:hasActualTime) must occur after 'occp:ConstructionStart' in the same 'occp:PhaseC_Construction'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure ConstructionCompletion occurs before ConstructionAcceptance in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeCC .
                            ?acceptance a occp:ConstructionAcceptance .
                            ?acceptance occp:belongsToProcess ?process .
                            ?acceptance occp:hasActualTime ?timeCA .
                            FILTER (?timeCC >= ?timeCA)
                        }
                    """ ;
                    sh:message "For 'occp:ConstructionCompletion': Actual time (occp:hasActualTime) must occur before 'occp:ConstructionAcceptance' in the same process."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure ConstructionCompletion occurs before DefectElimStart in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeCC .
                            ?defectStart a occp:DefectElimStart .
                            ?defectStart occp:belongsToProcess ?process .
                            ?defectStart occp:hasActualTime ?timeDES .
                            FILTER (?timeCC >= ?timeDES)
                        }
                    """ ;
                    sh:message "For 'occp:ConstructionCompletion': Actual time (occp:hasActualTime) must occur before 'occp:DefectElimStart' in the same process."@en ;
                    sh:severity sh:Violation
                ] .

            osh:DefectElimStartShape a sh:NodeShape ;
                sh:targetClass occp:DefectElimStart ;
                # Instant belongs to Phase C (Construction)
                sh:property [
                    sh:path occp:belongsToPhase ;
                    sh:class occp:PhaseC_Construction ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:DefectElimStart' must belong to exactly one 'occp:PhaseC_Construction' via 'occp:belongsToPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure DefectElimStart occurs after ConstructionCompletion in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeDES .
                            ?completion a occp:ConstructionCompletion .
                            ?completion occp:belongsToProcess ?process .
                            ?completion occp:hasActualTime ?timeCC .
                            FILTER (?timeDES <= ?timeCC)
                        }
                    """ ;
                    sh:message "For 'occp:DefectElimStart': Actual time (occp:hasActualTime) must occur after 'occp:ConstructionCompletion' in the same process."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure DefectElimStart occurs before DefectElimCompletion in the same phase process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToPhase ?phase .
                            $this occp:hasActualTime ?timeDES .
                            ?defectComp a occp:DefectElimCompletion .
                            ?defectComp occp:belongsToPhase ?phase .
                            ?defectComp occp:hasActualTime ?timeDEC .
                            FILTER (?timeDES >= ?timeDEC)
                        }
                    """ ;
                    sh:message "For 'occp:DefectElimStart': Actual time (occp:hasActualTime) must occur before 'occp:DefectElimCompletion' in the same 'occp:PhaseC_Construction'."@en ;
                    sh:severity sh:Violation
                ] .

            osh:DefectElimCompletionShape a sh:NodeShape ;
                sh:targetClass occp:DefectElimCompletion ;
                # Instant belongs to Phase C (Construction)
                sh:property [
                    sh:path occp:belongsToPhase ;
                    sh:class occp:PhaseC_Construction ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:DefectElimCompletion' must belong to exactly one 'occp:PhaseC_Construction' via 'occp:belongsToPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure DefectElimCompletion occurs after DefectElimStart in the same phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToPhase ?phase .
                            $this occp:hasActualTime ?timeDEC .
                            ?defectStart a occp:DefectElimStart .
                            ?defectStart occp:belongsToPhase ?phase .
                            ?defectStart occp:hasActualTime ?timeDES .
                            FILTER (?timeDEC <= ?timeDES)
                        }
                    """ ;
                    sh:message "For 'occp:DefectElimCompletion': Actual time (occp:hasActualTime) must occur after 'occp:DefectElimStart' in the same 'occp:PhaseC_Construction'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure DefectElimCompletion occurs before ConstructionAcceptance in the same phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToPhase ?phase .
                            $this occp:hasActualTime ?timeDEC .
                            ?acceptance a occp:ConstructionAcceptance .
                            ?acceptance occp:endsPhase ?phase .
                            ?acceptance occp:hasActualTime ?timeCA .
                            FILTER (?timeDEC >= ?timeCA)
                        }
                    """ ;
                    sh:message "For 'occp:DefectElimCompletion': Actual time (occp:hasActualTime) must occur before 'occp:ConstructionAcceptance' in the same 'occp:PhaseC_Construction'."@en ;
                    sh:severity sh:Violation
                ] .

            osh:ConstructionAcceptanceShape a sh:NodeShape ;
                sh:targetClass occp:ConstructionAcceptance ;
                # Instant ends Phase C (Construction)
                sh:property [
                    sh:path occp:endsPhase ;
                    sh:class occp:PhaseC_Construction ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:ConstructionAcceptance' must end exactly one 'occp:PhaseC_Construction' via 'occp:endsPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure ConstructionAcceptance occurs before UsageStart in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:endsPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeCA .
                            ?usageStart a occp:UsageStart .
                            ?usageStart occp:belongsToProcess ?process .
                            ?usageStart occp:hasActualTime ?timeUS .
                            FILTER (?timeCA >= ?timeUS)
                        }
                    """ ;
                    sh:message "For 'occp:ConstructionAcceptance': Actual time (occp:hasActualTime) should occur before 'occp:UsageStart' in the same process."@en ;
                    sh:severity sh:Warning
                ] ;
                # Ensure ConstructionAcceptance occurs before or with CompletionOfConstruction in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:endsPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeCA .
                            ?completion a occp:CompletionOfConstruction .
                            ?completion occp:belongsToProcess ?process .
                            ?completion occp:hasActualTime ?timeCOC .
                            FILTER (?timeCA > ?timeCOC)
                        }
                    """ ;
                    sh:message "For 'occp:ConstructionAcceptance': Actual time (occp:hasActualTime) must occur before 'occp:CompletionOfConstruction' in the same process."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure ConstructionAcceptance occurs after ConstructionCompletion in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:endsPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeCA .
                            ?completion a occp:ConstructionCompletion .
                            ?completion occp:belongsToProcess ?process .
                            ?completion occp:hasActualTime ?timeCC .
                            FILTER (?timeCA <= ?timeCC)
                        }
                    """ ;
                    sh:message "For 'occp:ConstructionAcceptance': Actual time (occp:hasActualTime) must occur after 'occp:ConstructionCompletion' in the same process."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure ConstructionAcceptance occurs after DefectElimCompletion in the same phase (if exists)
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:endsPhase ?phase .
                            $this occp:hasActualTime ?timeCA .
                            ?defectComp a occp:DefectElimCompletion .
                            ?defectComp occp:belongsToPhase ?phase .
                            ?defectComp occp:hasActualTime ?timeDEC .
                            FILTER (?timeCA <= ?timeDEC)
                        }
                    """ ;
                    sh:message "For 'occp:ConstructionAcceptance': Actual time (occp:hasActualTime) must occur after 'occp:DefectElimCompletion' in the same 'occp:PhaseC_Construction'."@en ;
                    sh:severity sh:Violation
                ] .


    ### PHASE D INSTANTS
        # PHASE ASSIGNMENT
            osh:PhaseDInstantShape a sh:NodeShape ;
                sh:targetClass occp:PhaseD_Usage_Instant ;
                sh:property [
                    sh:path occp:belongsToPhase ;
                    sh:class occp:PhaseD_Usage ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:PhaseD_Usage_Instant' must belong to exactly one 'occp:PhaseD_Usage' via 'occp:belongsToPhase'."@en ;
                    sh:severity sh:Violation ;
                ] .

        ### INSTANT SHAPES PHASE D - USAGE

            osh:UsageStartShape a sh:NodeShape ;
                sh:targetClass occp:UsageStart ;
                # Instant starts a new Phase D (Usage)
                sh:property [
                    sh:path occp:startsPhase ;
                    sh:class occp:PhaseD_Usage ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:UsageStart' must start exactly one 'occp:PhaseD_Usage' via 'occp:startsPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure UsageStart occurs after ConstructionAcceptance in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:startsPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeUS .
                            ?constrAccept a occp:ConstructionAcceptance .
                            ?constrAccept occp:belongsToProcess ?process .
                            ?constrAccept occp:hasActualTime ?timeCA .
                            FILTER (?timeUS <= ?timeCA)
                        }
                    """ ;
                    sh:message "For 'occp:UsageStart': Actual time (occp:hasActualTime) must occur after 'occp:ConstructionAcceptance' in the same process."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure UsageStart occurs before UsageEnd in the same phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:startsPhase ?phase .
                            $this occp:hasActualTime ?timeUS .
                            ?usageEnd a occp:UsageEnd .
                            ?usageEnd occp:endsPhase ?phase .
                            ?usageEnd occp:hasActualTime ?timeUE .
                            FILTER (?timeUS >= ?timeUE)
                        }
                    """ ;
                    sh:message "For 'occp:UsageStart': Actual time (occp:hasActualTime) must occur before 'occp:UsageEnd' in the same 'occp:PhaseD_Usage'."@en ;
                    sh:severity sh:Violation
                ] .

            osh:UsageChangeShape a sh:NodeShape ;
                sh:targetClass occp:UsageChange ;
                # Instant ends a Usage Phase
                sh:property [
                    sh:path occp:endsPhase ;
                    sh:class occp:PhaseD_Usage ;
                    sh:minCount 1 ;
                    sh:message "Each 'occp:UsageChange' must end at least one 'occp:PhaseD_Usage' via 'occp:endsPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Instant starts a new Usage Phase
                sh:property [
                    sh:path occp:startsPhase ;
                    sh:class occp:PhaseD_Usage ;
                    sh:minCount 1 ;
                    sh:message "Each 'occp:UsageChange' must start at least one 'occp:PhaseD_Usage' via 'occp:startsPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure UsageChange occurs after CompletionOfConstruction in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:endsPhase ?oldPhase .
                            ?oldPhase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeUC .
                            ?compConstr a occp:CompletionOfConstruction .
                            ?compConstr occp:belongsToProcess ?process .
                            ?compConstr occp:hasActualTime ?timeCOC .
                            FILTER (?timeUC <= ?timeCOC)
                        }
                    """ ;
                    sh:message "For 'occp:UsageChange': Actual time (occp:hasActualTime) must occur after 'occp:CompletionOfConstruction' in the same process."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure UsageChange occurs after UsageStart in the same phase (for the phase it ends)
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:endsPhase ?phase .
                            $this occp:hasActualTime ?timeUC .
                            ?usageStart a occp:UsageStart .
                            ?usageStart occp:startsPhase ?phase .
                            ?usageStart occp:hasActualTime ?timeUS .
                            FILTER (?timeUC <= ?timeUS)
                        }
                    """ ;
                    sh:message "For 'occp:UsageChange': Actual time (occp:hasActualTime) must occur after 'occp:UsageStart' in the same 'occp:PhaseD_Usage' it ends."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure UsageChange occurs before UsageEnd in the same phase (for the phase it starts)
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:startsPhase ?phase .
                            $this occp:hasActualTime ?timeUC .
                            ?usageEnd a occp:UsageEnd .
                            ?usageEnd occp:endsPhase ?phase .
                            ?usageEnd occp:hasActualTime ?timeUE .
                            FILTER (?timeUC >= ?timeUE)
                        }
                    """ ;
                    sh:message "For 'occp:UsageChange': Actual time (occp:hasActualTime) must occur before 'occp:UsageEnd' in the same 'occp:PhaseD_Usage' it starts."@en ;
                    sh:severity sh:Violation
                ] .

            osh:UsageEndShape a sh:NodeShape ;
                sh:targetClass occp:UsageEnd ;
                # Instant ends a Usage Phase
                sh:property [
                    sh:path occp:endsPhase ;
                    sh:class occp:PhaseD_Usage ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:UsageEnd' must end exactly one 'occp:PhaseD_Usage' via 'occp:endsPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure UsageEnd occurs after UsageStart in the same phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:endsPhase ?phase .
                            $this occp:hasActualTime ?timeUE .
                            ?usageStart a occp:UsageStart .
                            ?usageStart occp:startsPhase ?phase .
                            ?usageStart occp:hasActualTime ?timeUS .
                            FILTER (?timeUE <= ?timeUS)
                        }
                    """ ;
                    sh:message "For 'occp:UsageEnd': Actual time (occp:hasActualTime) must occur after 'occp:UsageStart' in the same 'occp:PhaseD_Usage'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure UsageEnd occurs after UsageChange in the same phase (if UsageChange exists)
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:endsPhase ?phase .
                            $this occp:hasActualTime ?timeUE .
                            ?usageChange a occp:UsageChange .
                            ?usageChange occp:startsPhase ?phase .
                            ?usageChange occp:hasActualTime ?timeUC .
                            FILTER (?timeUE <= ?timeUC)
                        }
                    """ ;
                    sh:message "For 'occp:UsageEnd': Actual time (occp:hasActualTime) must occur after 'occp:UsageChange' in the same 'occp:PhaseD_Usage'."@en ;
                    sh:severity sh:Violation
                ] .

    
    ### PHASE E INSTANTS
        # PHASE ASSIGNMENT
            osh:PhaseEInstantShape a sh:NodeShape ;
                sh:targetClass occp:PhaseE_Warranty_Instant ;
                sh:property [
                    sh:path occp:belongsToPhase ;
                    sh:class occp:PhaseE_Warranty ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:PhaseE_Warranty_Instant' must belong to exactly one 'occp:PhaseE_Warranty' via 'occp:belongsToPhase'."@en ;
                    sh:severity sh:Violation ;
                ] .

        ### INSTANT SHAPES PHASE E - WARRANTY

            osh:WarrantyStartShape a sh:NodeShape ;
                sh:targetClass occp:WarrantyStart ;
                # Instant starts a new Phase E (Warranty)
                sh:property [
                    sh:path occp:startsPhase ;
                    sh:class occp:PhaseE_Warranty ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:WarrantyStart' must start exactly one 'occp:PhaseE_Warranty' via 'occp:startsPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure WarrantyStart occurs after ConstructionAcceptance in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:startsPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeWS .
                            ?acceptance a occp:ConstructionAcceptance .
                            ?acceptance occp:belongsToProcess ?process .
                            ?acceptance occp:hasActualTime ?timeCA .
                            FILTER (?timeWS <= ?timeCA)
                        }
                    """ ;
                    sh:message "For 'occp:WarrantyStart': Actual time (occp:hasActualTime) must occur after 'occp:ConstructionAcceptance' in the same process."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure WarrantyStart occurs before WarrantyEnd in the same phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:startsPhase ?phase .
                            $this occp:hasActualTime ?timeWS .
                            ?end a occp:WarrantyEnd .
                            ?end occp:endsPhase ?phase .
                            ?end occp:hasActualTime ?timeWE .
                            FILTER (?timeWS >= ?timeWE)
                        }
                    """ ;
                    sh:message "For 'occp:WarrantyStart': Actual time (occp:hasActualTime) must occur before 'occp:WarrantyEnd' in the same 'occp:PhaseE_Warranty'."@en ;
                    sh:severity sh:Violation
                ] .

            osh:WarrantyChangeShape a sh:NodeShape ;
                sh:targetClass occp:WarrantyChange ;
                # Instant ends a Warranty Phase
                sh:property [
                    sh:path occp:endsPhase ;
                    sh:class occp:PhaseE_Warranty ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:WarrantyChange' must end exactly one 'occp:PhaseE_Warranty' via 'occp:endsPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Instant starts a new Warranty Phase
                sh:property [
                    sh:path occp:startsPhase ;
                    sh:class occp:PhaseE_Warranty ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:WarrantyChange' must start exactly one 'occp:PhaseE_Warranty' via 'occp:startsPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure WarrantyChange occurs after CompletionOfConstruction in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:endsPhase ?oldPhase .
                            ?oldPhase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeWC .
                            ?completion a occp:CompletionOfConstruction .
                            ?completion occp:belongsToProcess ?process .
                            ?completion occp:hasActualTime ?timeCOC .
                            FILTER (?timeWC <= ?timeCOC)
                        }
                    """ ;
                    sh:message "For 'occp:WarrantyChange': Actual time (occp:hasActualTime) must occur after 'occp:CompletionOfConstruction' in the same process."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure WarrantyChange occurs after WarrantyStart in the same phase (ended phase)
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:endsPhase ?phase .
                            $this occp:hasActualTime ?timeWC .
                            ?start a occp:WarrantyStart .
                            ?start occp:startsPhase ?phase .
                            ?start occp:hasActualTime ?timeWS .
                            FILTER (?timeWC <= ?timeWS)
                        }
                    """ ;
                    sh:message "For 'occp:WarrantyChange': Actual time (occp:hasActualTime) must occur after 'occp:WarrantyStart' in the same 'occp:PhaseE_Warranty' it ends."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure WarrantyChange occurs before WarrantyEnd in the same phase (started phase)
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:startsPhase ?phase .
                            $this occp:hasActualTime ?timeWC .
                            ?end a occp:WarrantyEnd .
                            ?end occp:endsPhase ?phase .
                            ?end occp:hasActualTime ?timeWE .
                            FILTER (?timeWC >= ?timeWE)
                        }
                    """ ;
                    sh:message "For 'occp:WarrantyChange': Actual time (occp:hasActualTime) must occur before 'occp:WarrantyEnd' in the same 'occp:PhaseE_Warranty' it starts."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure WarrantyChange occurs before DeconstructionStart in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:endsPhase ?oldPhase .
                            ?oldPhase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeWC .
                            ?deconStart a occp:DeconstructionStart .
                            ?deconStart occp:belongsToProcess ?process .
                            ?deconStart occp:hasActualTime ?timeDS .
                            FILTER (?timeWC >= ?timeDS)
                        }
                    """ ;
                    sh:message "For 'occp:WarrantyChange': Actual time (occp:hasActualTime) must occur before 'occp:DeconstructionStart' in the same process."@en ;
                    sh:severity sh:Violation
                ] .

            osh:WarrantyEndShape a sh:NodeShape ;
                sh:targetClass occp:WarrantyEnd ;
                # Instant ends a Warranty Phase
                sh:property [
                    sh:path occp:endsPhase ;
                    sh:class occp:PhaseE_Warranty ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:WarrantyEnd' must end exactly one 'occp:PhaseE_Warranty' via 'occp:endsPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure WarrantyEnd occurs after WarrantyStart in the same phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:endsPhase ?phase .
                            $this occp:hasActualTime ?timeWE .
                            ?start a occp:WarrantyStart .
                            ?start occp:startsPhase ?phase .
                            ?start occp:hasActualTime ?timeWS .
                            FILTER (?timeWE <= ?timeWS)
                        }
                    """ ;
                    sh:message "For 'occp:WarrantyEnd': Actual time (occp:hasActualTime) must occur after 'occp:WarrantyStart' in the same 'occp:PhaseE_Warranty'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure WarrantyEnd occurs after WarrantyChange in the same phase (if WarrantyChange exists)
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:endsPhase ?phase .
                            $this occp:hasActualTime ?timeWE .
                            ?change a occp:WarrantyChange .
                            ?change occp:startsPhase ?phase .
                            ?change occp:hasActualTime ?timeWC .
                            FILTER (?timeWE <= ?timeWC)
                        }
                    """ ;
                    sh:message "For 'occp:WarrantyEnd': Actual time (occp:hasActualTime) must occur after 'occp:WarrantyChange' in the same 'occp:PhaseE_Warranty'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure WarrantyEnd occurs before DeconstructionStart in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:endsPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeWE .
                            ?deconStart a occp:DeconstructionStart .
                            ?deconStart occp:belongsToProcess ?process .
                            ?deconStart occp:hasActualTime ?timeDS .
                            FILTER (?timeWE >= ?timeDS)
                        }
                    """ ;
                    sh:message "For 'occp:WarrantyEnd': Actual time (occp:hasActualTime) must occur before 'occp:DeconstructionStart' in the same process."@en ;
                    sh:severity sh:Violation
                ] .

    ### PHASE F INSTANTS
        # PHASE ASSIGNMENT
            osh:PhaseFInstantShape a sh:NodeShape ;
                sh:targetClass occp:PhaseF_DesignLife_Instant ;
                sh:property [
                    sh:path occp:belongsToPhase ;
                    sh:class occp:PhaseF_DesignLife ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:PhaseF_DesignLife_Instant' must belong to exactly one 'occp:PhaseF_DesignLife' via 'occp:belongsToPhase'."@en ;
                    sh:severity sh:Violation ;
                ] .

        ### INSTANT SHAPES PHASE F - DESIGN LIFE

            osh:DesignLifeStartShape a sh:NodeShape ;
                sh:targetClass occp:DesignLifeStart ;
                # Instant starts a new Phase F (Design Life)
                sh:property [
                    sh:path occp:startsPhase ;
                    sh:class occp:PhaseF_DesignLife ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:DesignLifeStart' must start exactly one 'occp:PhaseF_DesignLife' via 'occp:startsPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure DesignLifeStart occurs after ConstructionAcceptance in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:startsPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeDLS .
                            ?constAccept a occp:ConstructionAcceptance .
                            ?constAccept occp:belongsToProcess ?process .
                            ?constAccept occp:hasActualTime ?timeCA .
                            FILTER (?timeDLS <= ?timeCA)
                        }
                    """ ;
                    sh:message "For 'occp:DesignLifeStart': Actual time (occp:hasActualTime) must occur after 'occp:ConstructionAcceptance' in the same process."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure DesignLifeStart occurs before DesignLifeChange in the same phase (if DesignLifeChange exists)
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:startsPhase ?phase .
                            $this occp:hasActualTime ?timeDLS .
                            ?designChange a occp:DesignLifeChange .
                            ?designChange occp:endsPhase ?phase .
                            ?designChange occp:hasActualTime ?timeDLC .
                            FILTER (?timeDLS >= ?timeDLC)
                        }
                    """ ;
                    sh:message "For 'occp:DesignLifeStart': Actual time (occp:hasActualTime) must occur before 'occp:DesignLifeChange' in the same 'occp:PhaseF_DesignLife'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure DesignLifeStart occurs before DesignLifeEnd in the same phase (if DesignLifeEnd exists)
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:startsPhase ?phase .
                            $this occp:hasActualTime ?timeDLS .
                            ?designEnd a occp:DesignLifeEnd .
                            ?designEnd occp:endsPhase ?phase .
                            ?designEnd occp:hasActualTime ?timeDLE .
                            FILTER (?timeDLS >= ?timeDLE)
                        }
                    """ ;
                    sh:message "For 'occp:DesignLifeStart': Actual time (occp:hasActualTime) must occur before 'occp:DesignLifeEnd' in the same 'occp:PhaseF_DesignLife'."@en ;
                    sh:severity sh:Violation
                ] .  

            osh:DesignLifeChangeShape a sh:NodeShape ;
                sh:targetClass occp:DesignLifeChange ;
                # Ends a current Design Life Phase
                sh:property [
                    sh:path occp:endsPhase ;
                    sh:class occp:PhaseF_DesignLife ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:DesignLifeChange' must end exactly one 'occp:PhaseF_DesignLife' via 'occp:endsPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Starts a new Design Life Phase
                sh:property [
                    sh:path occp:startsPhase ;
                    sh:class occp:PhaseF_DesignLife ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:DesignLifeChange' must start exactly one 'occp:PhaseF_DesignLife' via 'occp:startsPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure DesignLifeChange occurs after ConstructionAcceptance in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:endsPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeDLC .
                            ?constAccept a occp:ConstructionAcceptance .
                            ?constAccept occp:belongsToProcess ?process .
                            ?constAccept occp:hasActualTime ?timeCA .
                            FILTER (?timeDLC <= ?timeCA)
                        }
                    """ ;
                    sh:message "For 'occp:DesignLifeChange': Actual time (occp:hasActualTime) must occur after 'occp:ConstructionAcceptance' in the same process."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure DesignLifeChange occurs after DesignLifeStart in the ended phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:endsPhase ?phase .
                            $this occp:hasActualTime ?timeDLC .
                            ?designStart a occp:DesignLifeStart .
                            ?designStart occp:startsPhase ?phase .
                            ?designStart occp:hasActualTime ?timeDLS .
                            FILTER (?timeDLC <= ?timeDLS)
                        }
                    """ ;
                    sh:message "For 'occp:DesignLifeChange': Actual time (occp:hasActualTime) must occur after 'occp:DesignLifeStart' in the same 'occp:PhaseF_DesignLife' it ends."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure DesignLifeChange occurs before DesignLifeEnd in the started phase (if DesignLifeEnd exists)
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:startsPhase ?phase .
                            $this occp:hasActualTime ?timeDLC .
                            ?designEnd a occp:DesignLifeEnd .
                            ?designEnd occp:endsPhase ?phase .
                            ?designEnd occp:hasActualTime ?timeDLE .
                            FILTER (?timeDLC >= ?timeDLE)
                        }
                    """ ;
                    sh:message "For 'occp:DesignLifeChange': Actual time (occp:hasActualTime) must occur before 'occp:DesignLifeEnd' in the same 'occp:PhaseF_DesignLife' it starts."@en ;
                    sh:severity sh:Violation
                ] .

            osh:DesignLifeEndShape a sh:NodeShape ;
                sh:targetClass occp:DesignLifeEnd ;
                # Ends a current Design Life Phase
                sh:property [
                    sh:path occp:endsPhase ;
                    sh:class occp:PhaseF_DesignLife ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:DesignLifeEnd' must end exactly one 'occp:PhaseF_DesignLife' via 'occp:endsPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure DesignLifeEnd occurs after DesignLifeStart in the same phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:endsPhase ?phase .
                            $this occp:hasActualTime ?timeDLE .
                            ?designStart a occp:DesignLifeStart .
                            ?designStart occp:startsPhase ?phase .
                            ?designStart occp:hasActualTime ?timeDLS .
                            FILTER (?timeDLE <= ?timeDLS)
                        }
                    """ ;
                    sh:message "For 'occp:DesignLifeEnd': Actual time (occp:hasActualTime) must occur after 'occp:DesignLifeStart' in the same 'occp:PhaseF_DesignLife'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure DesignLifeEnd occurs after DesignLifeChange in the same phase (if DesignLifeChange exists)
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:endsPhase ?phase .
                            $this occp:hasActualTime ?timeDLE .
                            ?designChange a occp:DesignLifeChange .
                            ?designChange occp:startsPhase ?phase .
                            ?designChange occp:hasActualTime ?timeDLC .
                            FILTER (?timeDLE <= ?timeDLC)
                        }
                    """ ;
                    sh:message "For 'occp:DesignLifeEnd': Actual time (occp:hasActualTime) must occur after 'occp:DesignLifeChange' in the same 'occp:PhaseF_DesignLife'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure DesignLifeEnd occurs after ConstructionAcceptance in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:endsPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeDLE .
                            ?constAccept a occp:ConstructionAcceptance .
                            ?constAccept occp:belongsToProcess ?process .
                            ?constAccept occp:hasActualTime ?timeCA .
                            FILTER (?timeDLE <= ?timeCA)
                        }
                    """ ;
                    sh:message "For 'occp:DesignLifeEnd': Actual time (occp:hasActualTime) must occur after 'occp:ConstructionAcceptance' in the same process."@en ;
                    sh:severity sh:Violation
                ] .


    ### PHASE G INSTANTS
        # PHASE ASSIGNMENT
            osh:PhaseGInstantShape a sh:NodeShape ;
                sh:targetClass occp:PhaseG_Inspection_Instant ;
                sh:property [
                    sh:path occp:belongsToPhase ;
                    sh:class occp:PhaseG_Inspection ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:PhaseG_Inspection_Instant' must belong to exactly one 'occp:PhaseG_Inspection' via 'occp:belongsToPhase'."@en ;
                    sh:severity sh:Violation ;
                ] .

        ### INSTANT SHAPES PHASE G - INSPECTION

            osh:InspectionExecutionShape a sh:NodeShape ;
                sh:targetClass occp:InspectionExecution ;
                # Instant belongs to Phase G (Inspection)
                sh:property [
                    sh:path occp:belongsToPhase ;
                    sh:class occp:PhaseG_Inspection ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:InspectionExecution' must belong to exactly one 'occp:PhaseG_Inspection' via 'occp:belongsToPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure InspectionExecution occurs after ConstructionStart in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeIE .
                            ?constStart a occp:ConstructionStart .
                            ?constStart occp:belongsToProcess ?process .
                            ?constStart occp:hasActualTime ?timeCS .
                            FILTER (?timeIE <= ?timeCS)
                        }
                    """ ;
                    sh:message "For 'occp:InspectionExecution': Actual time (occp:hasActualTime) must occur after 'occp:ConstructionStart' in the same process."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure InspectionExecution occurs after UsageStart in the same phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToPhase ?phase .
                            $this occp:hasActualTime ?timeIE .
                            ?usageStart a occp:UsageStart .
                            ?usageStart occp:belongsToPhase ?phase .
                            ?usageStart occp:hasActualTime ?timeUS .
                            FILTER (?timeIE <= ?timeUS)
                        }
                    """ ;
                    sh:message "For 'occp:InspectionExecution': Actual time (occp:hasActualTime) must occur after 'occp:UsageStart' in the same 'occp:PhaseG_Inspection'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure InspectionExecution occurs after UsageChange in the same phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToPhase ?phase .
                            $this occp:hasActualTime ?timeIE .
                            ?usageChange a occp:UsageChange .
                            ?usageChange occp:belongsToPhase ?phase .
                            ?usageChange occp:hasActualTime ?timeUC .
                            FILTER (?timeIE <= ?timeUC)
                        }
                    """ ;
                    sh:message "For 'occp:InspectionExecution': Actual time (occp:hasActualTime) must occur after 'occp:UsageChange' in the same 'occp:PhaseG_Inspection'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure InspectionExecution occurs before DeconstructionStart in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeIE .
                            ?deconStart a occp:DeconstructionStart .
                            ?deconStart occp:belongsToProcess ?process .
                            ?deconStart occp:hasActualTime ?timeDS .
                            FILTER (?timeIE >= ?timeDS)
                        }
                    """ ;
                    sh:message "For 'occp:InspectionExecution': Actual time (occp:hasActualTime) must occur before 'occp:DeconstructionStart' in the same process."@en ;
                    sh:severity sh:Violation
                ] .

            osh:IrregularInspectionShape a sh:NodeShape ;
                sh:targetClass occp:IrregularInspection ;
                # Instant belongs to Phase G (Inspection)
                sh:property [
                    sh:path occp:belongsToPhase ;
                    sh:class occp:PhaseG_Inspection ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:IrregularInspection' must belong to exactly one 'occp:PhaseG_Inspection' via 'occp:belongsToPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure IrregularInspection occurs after UsageStart in the same phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToPhase ?phase .
                            $this occp:hasActualTime ?timeII .
                            ?usageStart a occp:UsageStart .
                            ?usageStart occp:belongsToPhase ?phase .
                            ?usageStart occp:hasActualTime ?timeUS .
                            FILTER (?timeII <= ?timeUS)
                        }
                    """ ;
                    sh:message "For 'occp:IrregularInspection': Actual time (occp:hasActualTime) must occur after 'occp:UsageStart' in the same 'occp:PhaseG_Inspection'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure IrregularInspection occurs before DeconstructionStart in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeII .
                            ?deconStart a occp:DeconstructionStart .
                            ?deconStart occp:belongsToProcess ?process .
                            ?deconStart occp:hasActualTime ?timeDS .
                            FILTER (?timeII >= ?timeDS)
                        }
                    """ ;
                    sh:message "For 'occp:IrregularInspection': Actual time (occp:hasActualTime) must occur before 'occp:DeconstructionStart' in the same process."@en ;
                    sh:severity sh:Violation
                ] .

            osh:NextRegularInspectionShape a sh:NodeShape ;
                sh:targetClass occp:NextRegularInspection ;
                # Instant belongs to Phase G (Inspection)
                sh:property [
                    sh:path occp:belongsToPhase ;
                    sh:class occp:PhaseG_Inspection ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:NextRegularInspection' must belong to exactly one 'occp:PhaseG_Inspection' via 'occp:belongsToPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure NextRegularInspection occurs after InspectionExecution in the same phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToPhase ?phase .
                            $this occp:hasActualTime ?timeNRI .
                            ?inspExec a occp:InspectionExecution .
                            ?inspExec occp:belongsToPhase ?phase .
                            ?inspExec occp:hasActualTime ?timeIE .
                            FILTER (?timeNRI <= ?timeIE)
                        }
                    """ ;
                    sh:message "For 'occp:NextRegularInspection': Actual time (occp:hasActualTime) must occur after 'occp:InspectionExecution' in the same 'occp:PhaseG_Inspection'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure NextRegularInspection occurs after UsageStart in the same phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToPhase ?phase .
                            $this occp:hasActualTime ?timeNRI .
                            ?usageStart a occp:UsageStart .
                            ?usageStart occp:belongsToPhase ?phase .
                            ?usageStart occp:hasActualTime ?timeUS .
                            FILTER (?timeNRI <= ?timeUS)
                        }
                    """ ;
                    sh:message "For 'occp:NextRegularInspection': Actual time (occp:hasActualTime) must occur after 'occp:UsageStart' in the same 'occp:PhaseG_Inspection'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure NextRegularInspection occurs before DeconstructionStart in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeNRI .
                            ?deconStart a occp:DeconstructionStart .
                            ?deconStart occp:belongsToProcess ?process .
                            ?deconStart occp:hasActualTime ?timeDS .
                            FILTER (?timeNRI >= ?timeDS)
                        }
                    """ ;
                    sh:message "For 'occp:NextRegularInspection': Actual time (occp:hasActualTime) must occur before 'occp:DeconstructionStart' in the same process."@en ;
                    sh:severity sh:Violation
                ] .


    ### PHASE H INSTANTS
        # PHASE ASSIGNMENT
            osh:PhaseHInstantShape a sh:NodeShape ;
                sh:targetClass occp:PhaseH_SpecialEvents_Instant ;
                sh:property [
                    sh:path occp:belongsToPhase ;
                    sh:class occp:PhaseH_SpecialEvents ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:PhaseH_SpecialEvents_Instant' must belong to exactly one 'occp:PhaseH_SpecialEvents' via 'occp:belongsToPhase'."@en ;
                    sh:severity sh:Violation ;
                ] .

        ### INSTANT SHAPES PHASE H - SPECIAL EVENTS

            osh:GeologicalEventShape a sh:NodeShape ;
                sh:targetClass occp:GeologicalEvent ;
                # Ensure GeologicalEvent occurs after ConstructionAcceptance in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeGE .
                            ?constAccept a occp:ConstructionAcceptance .
                            ?constAccept occp:belongsToProcess ?process .
                            ?constAccept occp:hasActualTime ?timeCA .
                            FILTER (?timeGE <= ?timeCA)
                        }
                    """ ;
                    sh:message "For 'occp:GeologicalEvent': Actual time (occp:hasActualTime) must occur after 'occp:ConstructionAcceptance' in the same process."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure GeologicalEvent occurs before DeconstructionStart in the same process (if DeconstructionStart exists)
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeGE .
                            ?deconStart a occp:DeconstructionStart .
                            ?deconStart occp:belongsToProcess ?process .
                            ?deconStart occp:hasActualTime ?timeDS .
                            FILTER (?timeGE >= ?timeDS)
                        }
                    """ ;
                    sh:message "For 'occp:GeologicalEvent': Actual time (occp:hasActualTime) must occur before 'occp:DeconstructionStart' in the same process."@en ;
                    sh:severity sh:Violation
                ] .

            osh:LoadEventShape a sh:NodeShape ;
                sh:targetClass occp:LoadEvent ;
                # Ensure LoadEvent occurs after ConstructionAcceptance in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeLE .
                            ?constAccept a occp:ConstructionAcceptance .
                            ?constAccept occp:belongsToProcess ?process .
                            ?constAccept occp:hasActualTime ?timeCA .
                            FILTER (?timeLE <= ?timeCA)
                        }
                    """ ;
                    sh:message "For 'occp:LoadEvent': Actual time (occp:hasActualTime) must occur after 'occp:ConstructionAcceptance' in the same process."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure LoadEvent occurs before DeconstructionStart in the same process (if DeconstructionStart exists)
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeLE .
                            ?deconStart a occp:DeconstructionStart .
                            ?deconStart occp:belongsToProcess ?process .
                            ?deconStart occp:hasActualTime ?timeDS .
                            FILTER (?timeLE >= ?timeDS)
                        }
                    """ ;
                    sh:message "For 'occp:LoadEvent': Actual time (occp:hasActualTime) must occur before 'occp:DeconstructionStart' in the same process."@en ;
                    sh:severity sh:Violation
                ] .

            osh:LoadEventShape a sh:NodeShape ;
                sh:targetClass occp:LoadEvent ;
                # Ensure LoadEvent occurs after ConstructionAcceptance in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeLE .
                            ?constAccept a occp:ConstructionAcceptance .
                            ?constAccept occp:belongsToProcess ?process .
                            ?constAccept occp:hasActualTime ?timeCA .
                            FILTER (?timeLE <= ?timeCA)
                        }
                    """ ;
                    sh:message "For 'occp:LoadEvent': Actual time (occp:hasActualTime) must occur after 'occp:ConstructionAcceptance' in the same process."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure LoadEvent occurs before DeconstructionStart in the same process (if DeconstructionStart exists)
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeLE .
                            ?deconStart a occp:DeconstructionStart .
                            ?deconStart occp:belongsToProcess ?process .
                            ?deconStart occp:hasActualTime ?timeDS .
                            FILTER (?timeLE >= ?timeDS)
                        }
                    """ ;
                    sh:message "For 'occp:LoadEvent': Actual time (occp:hasActualTime) must occur before 'occp:DeconstructionStart' in the same process."@en ;
                    sh:severity sh:Violation
                ] .

            osh:WeatherEventShape a sh:NodeShape ;
                sh:targetClass occp:WeatherEvent ;
                # Ensure WeatherEvent occurs after ConstructionAcceptance in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeWE .
                            ?constAccept a occp:ConstructionAcceptance .
                            ?constAccept occp:belongsToProcess ?process .
                            ?constAccept occp:hasActualTime ?timeCA .
                            FILTER (?timeWE <= ?timeCA)
                        }
                    """ ;
                    sh:message "For 'occp:WeatherEvent': Actual time (occp:hasActualTime) must occur after 'occp:ConstructionAcceptance' in the same process."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure WeatherEvent occurs before DeconstructionStart in the same process (if DeconstructionStart exists)
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeWE .
                            ?deconStart a occp:DeconstructionStart .
                            ?deconStart occp:belongsToProcess ?process .
                            ?deconStart occp:hasActualTime ?timeDS .
                            FILTER (?timeWE >= ?timeDS)
                        }
                    """ ;
                    sh:message "For 'occp:WeatherEvent': Actual time (occp:hasActualTime) must occur before 'occp:DeconstructionStart' in the same process."@en ;
                    sh:severity sh:Violation
                ] .


    ### PHASE K INSTANTS
        # PHASE ASSIGNMENT
            osh:PhaseKInstantShape a sh:NodeShape ;
                sh:targetClass occp:PhaseK_Damage_Instant ;
                sh:property [
                    sh:path occp:belongsToPhase ;
                    sh:class occp:PhaseK_Damage ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:PhaseK_Damage_Instant' must belong to exactly one 'occp:PhaseK_Damage' via 'occp:belongsToPhase'."@en ;
                    sh:severity sh:Violation ;
                ] .

        ### INSTANT SHAPES PHASE K - DAMAGE

            osh:DamageDetectionShape a sh:NodeShape ;
                sh:targetClass occp:DamageDetection ;
                # Instant starts a new Phase K (Damage)
                sh:property [
                    sh:path occp:startsPhase ;
                    sh:class occp:PhaseK_Damage ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:DamageDetection' must start exactly one 'occp:PhaseK_Damage' via 'occp:startsPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure DamageDetection occurs after ConstructionAcceptance in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:startsPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeDD .
                            ?conAccept a occp:ConstructionAcceptance .
                            ?conAccept occp:belongsToProcess ?process .
                            ?conAccept occp:hasActualTime ?timeCA .
                            FILTER (?timeDD <= ?timeCA)
                        }
                    """ ;
                    sh:message "For 'occp:DamageDetection': Actual time (occp:hasActualTime) must occur after 'occp:ConstructionAcceptance' in the same process."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure DamageDetection occurs before DeconstructionStart in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:startsPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeDD .
                            ?deconStart a occp:DeconstructionStart .
                            ?deconStart occp:belongsToProcess ?process .
                            ?deconStart occp:hasActualTime ?timeDS .
                            FILTER (?timeDD >= ?timeDS)
                        }
                    """ ;
                    sh:message "For 'occp:DamageDetection': Actual time (occp:hasActualTime) must occur before 'occp:DeconstructionStart' in the same process."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure DamageDetection occurs before DamageObservation in the same phase (if DamageObservation exists)
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:startsPhase ?phase .
                            $this occp:hasActualTime ?timeDD .
                            ?damageObs a occp:DamageObservation .
                            ?damageObs occp:belongsToPhase ?phase .
                            ?damageObs occp:hasActualTime ?timeDO .
                            FILTER (?timeDD >= ?timeDO)
                        }
                    """ ;
                    sh:message "For 'occp:DamageDetection': Actual time (occp:hasActualTime) must occur before 'occp:DamageObservation' in the same 'occp:PhaseK_Damage'."@en ;
                    sh:severity sh:Violation
                ] .

            osh:DamageObservationShape a sh:NodeShape ;
                sh:targetClass occp:DamageObservation ;
                # Instant belongs to a Phase K (Damage)
                sh:property [
                    sh:path occp:belongsToPhase ;
                    sh:class occp:PhaseK_Damage ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:DamageObservation' must belong to exactly one 'occp:PhaseK_Damage' via 'occp:belongsToPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure DamageObservation occurs after DamageDetection in the same phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToPhase ?phase .
                            $this occp:hasActualTime ?timeDO .
                            ?damageDetect a occp:DamageDetection .
                            ?damageDetect occp:startsPhase ?phase .
                            ?damageDetect occp:hasActualTime ?timeDD .
                            FILTER (?timeDO <= ?timeDD)
                        }
                    """ ;
                    sh:message "For 'occp:DamageObservation': Actual time (occp:hasActualTime) must occur after 'occp:DamageDetection' in the same 'occp:PhaseK_Damage'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure DamageObservation occurs before DeconstructionStart in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeDO .
                            ?deconStart a occp:DeconstructionStart .
                            ?deconStart occp:belongsToProcess ?process .
                            ?deconStart occp:hasActualTime ?timeDS .
                            FILTER (?timeDO >= ?timeDS)
                        }
                    """ ;
                    sh:message "For 'occp:DamageObservation': Actual time (occp:hasActualTime) must occur before 'occp:DeconstructionStart' in the same process."@en ;
                    sh:severity sh:Violation
                ] .

            osh:DamageRepairShape a sh:NodeShape ;
                sh:targetClass occp:DamageRepair ;
                # Instant ends a Phase K (Damage)
                sh:property [
                    sh:path occp:endsPhase ;
                    sh:class occp:PhaseK_Damage ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:DamageRepair' must end exactly one 'occp:PhaseK_Damage' via 'occp:endsPhase'."@en ;  # Korrigierte Message
                    sh:severity sh:Violation
                ] ;
                # Ensure DamageRepair occurs after DamageDetection in the same phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:endsPhase ?phase .
                            $this occp:hasActualTime ?timeDR .
                            ?damageDetect a occp:DamageDetection .
                            ?damageDetect occp:startsPhase ?phase .
                            ?damageDetect occp:hasActualTime ?timeDD .
                            FILTER (?timeDR <= ?timeDD)
                        }
                    """ ;
                    sh:message "For 'occp:DamageRepair': Actual time (occp:hasActualTime) must occur after 'occp:DamageDetection' in the same 'occp:PhaseK_Damage'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure DamageRepair occurs before DeconstructionStart in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:endsPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeDR .
                            ?deconStart a occp:DeconstructionStart .
                            ?deconStart occp:belongsToProcess ?process .
                            ?deconStart occp:hasActualTime ?timeDS .
                            FILTER (?timeDR >= ?timeDS)
                        }
                    """ ;
                    sh:message "For 'occp:DamageRepair': Actual time (occp:hasActualTime) must occur before 'occp:DeconstructionStart' in the same process."@en ;
                    sh:severity sh:Violation
                ] .


    ### PHASE L INSTANTS
        # PHASE ASSIGNMENT
            osh:PhaseLInstantShape a sh:NodeShape ;
                sh:targetClass occp:PhaseL_Repair_Instant ;
                sh:property [
                    sh:path occp:belongsToPhase ;
                    sh:class occp:PhaseL_Repair ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:PhaseL_Repair_Instant' must belong to exactly one 'occp:PhaseL_Repair' via 'occp:belongsToPhase'."@en ;
                    sh:severity sh:Violation ;
                ] .

        # PHASE ASSIGNMENT

            osh:NewComponentShape a sh:NodeShape ;
                sh:targetClass occp:NewComponent ;
                # Instant belongs to a Phase L (Repair)
                sh:property [
                    sh:path occp:belongsToPhase ;
                    sh:class occp:PhaseL_Repair ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:NewComponent' must belong to exactly one 'occp:PhaseL_Repair' via 'occp:belongsToPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure NewComponent occurs after ConstructionCompletion in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeNC .
                            ?constComp a occp:ConstructionCompletion .
                            ?constComp occp:belongsToProcess ?process .
                            ?constComp occp:hasActualTime ?timeCC .
                            FILTER (?timeNC <= ?timeCC)
                        }
                    """ ;
                    sh:message "For 'occp:NewComponent': Actual time (occp:hasActualTime) must occur after 'occp:ConstructionCompletion' in the same process."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure NewComponent occurs before DeconstructionStart in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:belongsToPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeNC .
                            ?deconStart a occp:DeconstructionStart .
                            ?deconStart occp:belongsToProcess ?process .
                            ?deconStart occp:hasActualTime ?timeDS .
                            FILTER (?timeNC >= ?timeDS)
                        }
                    """ ;
                    sh:message "For 'occp:NewComponent': Actual time (occp:hasActualTime) must occur before 'occp:DeconstructionStart' in the same process."@en ;
                    sh:severity sh:Violation
                ] .

            osh:RepairStartShape a sh:NodeShape ;
                sh:targetClass occp:RepairStart ;
                # Instant starts a new Phase L (Repair)
                sh:property [
                    sh:path occp:startsPhase ;
                    sh:class occp:PhaseL_Repair ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:RepairStart' must start exactly one 'occp:PhaseL_Repair' via 'occp:startsPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure RepairStart occurs after DamageDetection in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:startsPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeRS .
                            ?damageDet a occp:DamageDetection .
                            ?damageDet occp:belongsToProcess ?process .
                            ?damageDet occp:hasActualTime ?timeDD .
                            FILTER (?timeRS <= ?timeDD)
                        }
                    """ ;
                    sh:message "For 'occp:RepairStart': Actual time (occp:hasActualTime) must occur after 'occp:DamageDetection' in the same process."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure RepairStart occurs before RepairCompletion in the same phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:startsPhase ?phase .
                            $this occp:hasActualTime ?timeRS .
                            ?repairComp a occp:RepairCompletion .
                            ?repairComp occp:endsPhase ?phase .
                            ?repairComp occp:hasActualTime ?timeRC .
                            FILTER (?timeRS >= ?timeRC)
                        }
                    """ ;
                    sh:message "For 'occp:RepairStart': Actual time (occp:hasActualTime) must occur before 'occp:RepairCompletion' in the same 'occp:PhaseL_Repair'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure RepairStart occurs before DeconstructionStart in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:startsPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeRS .
                            ?deconStart a occp:DeconstructionStart .
                            ?deconStart occp:belongsToProcess ?process .
                            ?deconStart occp:hasActualTime ?timeDS .
                            FILTER (?timeRS >= ?timeDS)
                        }
                    """ ;
                    sh:message "For 'occp:RepairStart': Actual time (occp:hasActualTime) must occur before 'occp:DeconstructionStart' in the same process."@en ;
                    sh:severity sh:Violation
                ] .

            osh:RepairCompletionShape a sh:NodeShape ;
                sh:targetClass occp:RepairCompletion ;
                # Instant ends a Phase L (Repair)
                sh:property [
                    sh:path occp:endsPhase ;
                    sh:class occp:PhaseL_Repair ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:RepairCompletion' must end exactly one 'occp:PhaseL_Repair' via 'occp:endsPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure RepairCompletion occurs after RepairStart in the same phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:endsPhase ?phase .
                            $this occp:hasActualTime ?timeRC .
                            ?repairStart a occp:RepairStart .
                            ?repairStart occp:startsPhase ?phase .
                            ?repairStart occp:hasActualTime ?timeRS .
                            FILTER (?timeRC <= ?timeRS)
                        }
                    """ ;
                    sh:message "For 'occp:RepairCompletion': Actual time (occp:hasActualTime) must occur after 'occp:RepairStart' in the same 'occp:PhaseL_Repair'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure RepairCompletion occurs before DeconstructionStart in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:endsPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeRC .
                            ?deconStart a occp:DeconstructionStart .
                            ?deconStart occp:belongsToProcess ?process .
                            ?deconStart occp:hasActualTime ?timeDS .
                            FILTER (?timeRC >= ?timeDS)
                        }
                    """ ;
                    sh:message "For 'occp:RepairCompletion': Actual time (occp:hasActualTime) must occur before 'occp:DeconstructionStart' in the same process."@en ;
                    sh:severity sh:Violation
                ] .


    ### PHASE M INSTANTS
        # PHASE ASSIGNMENT
            osh:PhaseMInstantShape a sh:NodeShape ;
                sh:targetClass occp:PhaseM_Deconstruction_Instant ;
                sh:property [
                    sh:path occp:belongsToPhase ;
                    sh:class occp:PhaseM_Deconstruction ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:PhaseM_Deconstruction_Instant' must belong to exactly one 'occp:PhaseM_Deconstruction' via 'occp:belongsToPhase'."@en ;
                    sh:severity sh:Violation ;
                ] .

        ### INSTANT SHAPES PHASE M - DECONSTRUCTION

            osh:DeconstructionStartShape a sh:NodeShape ;
                sh:targetClass occp:DeconstructionStart ;
                # Instant starts a new Phase M (Deconstruction)
                sh:property [
                    sh:path occp:startsPhase ;
                    sh:class occp:PhaseM_Deconstruction ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:DeconstructionStart' must start exactly one 'occp:PhaseM_Deconstruction' via 'occp:startsPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure DeconstructionStart occurs after ConstructionAcceptance in the same process
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:startsPhase ?phase .
                            ?phase occp:belongsToProcess ?process .
                            $this occp:hasActualTime ?timeDS .
                            ?acceptance a occp:ConstructionAcceptance .
                            ?acceptance occp:belongsToProcess ?process .
                            ?acceptance occp:hasActualTime ?timeCA .
                            FILTER (?timeDS <= ?timeCA)
                        }
                    """ ;
                    sh:message "For 'occp:DeconstructionStart': Actual time (occp:hasActualTime) must occur after 'occp:ConstructionAcceptance' in the same process."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure DeconstructionStart occurs before DeconstructionCompletion in the same phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:startsPhase ?phase .
                            $this occp:hasActualTime ?timeDS .
                            ?completion a occp:DeconstructionCompletion .
                            ?completion occp:endsPhase ?phase .
                            ?completion occp:hasActualTime ?timeDC .
                            FILTER (?timeDS >= ?timeDC)
                        }
                    """ ;
                    sh:message "For 'occp:DeconstructionStart': Actual time (occp:hasActualTime) must occur before 'occp:DeconstructionCompletion' in the same 'occp:PhaseM_Deconstruction'."@en ;
                    sh:severity sh:Violation
                ] .

            osh:DeconstructionCompletionShape a sh:NodeShape ;
                sh:targetClass occp:DeconstructionCompletion ;
                # Instant ends a Phase M (Deconstruction)
                sh:property [
                    sh:path occp:endsPhase ;
                    sh:class occp:PhaseM_Deconstruction ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each 'occp:DeconstructionCompletion' must end exactly one 'occp:PhaseM_Deconstruction' via 'occp:endsPhase'."@en ;
                    sh:severity sh:Violation
                ] ;
                # Ensure DeconstructionCompletion occurs after DeconstructionStart in the same phase
                sh:sparql [
                    sh:select """
                        PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                        PREFIX time: <http://www.w3.org/2006/time#>
                        SELECT $this
                        WHERE {
                            $this occp:endsPhase ?phase .
                            $this occp:hasActualTime ?timeDC .
                            ?start a occp:DeconstructionStart .
                            ?start occp:startsPhase ?phase .
                            ?start occp:hasActualTime ?timeDS .
                            FILTER (?timeDC <= ?timeDS)
                        }
                    """ ;
                    sh:message "For 'occp:DeconstructionCompletion': Actual time (occp:hasActualTime) must occur after 'occp:DeconstructionStart' in the same 'occp:PhaseM_Deconstruction'."@en ;
                    sh:severity sh:Violation
                ] .


#################################################################
#    ADDITIONAL SPARQL Queries
#################################################################

### GENERIC TIME QUERIES

    # Shape for time:before constraints
    osh:BeforeTimeShape a sh:NodeShape ;
        sh:targetClass time:TemporalEntity ;
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this ?other
                WHERE {
                    $this time:before ?other .
                    {
                        SELECT $this (MAX(?endTime) AS ?latestEndTime)
                        WHERE {
                            $this time:hasEnd ?endInstant .
                            ?endInstant occp:hasActualTime ?endTime .
                        }
                        GROUP BY $this
                        HAVING (BOUND(?latestEndTime))
                    }
                    {
                        SELECT ?other (MIN(?startTime) AS ?earliestStartTime)
                        WHERE {
                            ?other time:hasBeginning ?startInstant .
                            ?startInstant occp:hasActualTime ?startTime .
                        }
                        GROUP BY ?other
                        HAVING (BOUND(?earliestStartTime))
                    }
                    FILTER (?latestEndTime >= ?earliestStartTime)
                }
            """ ;
            sh:message "For 'time:TemporalEntity': Latest end time (time:hasEnd) must be before earliest start time (time:hasBeginning) of the entity it precedes via 'time:before'."@en ;
            sh:severity sh:Violation
        ] .

    # Shape for time:after constraints
    osh:AfterTimeShape a sh:NodeShape ;
        sh:targetClass time:TemporalEntity ;
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this ?other
                WHERE {
                    $this time:after ?other .
                    {
                        SELECT $this (MIN(?startTime) AS ?earliestStartTime)
                        WHERE {
                            $this time:hasBeginning ?startInstant .
                            ?startInstant occp:hasActualTime ?startTime .
                        }
                        GROUP BY $this
                        HAVING (BOUND(?earliestStartTime))
                    }
                    {
                        SELECT ?other (MAX(?endTime) AS ?latestEndTime)
                        WHERE {
                            ?other time:hasEnd ?endInstant .
                            ?endInstant occp:hasActualTime ?endTime .
                        }
                        GROUP BY ?other
                        HAVING (BOUND(?latestEndTime))
                    }
                    FILTER (?earliestStartTime <= ?latestEndTime)
                }
            """ ;
            sh:message "For 'time:TemporalEntity': Earliest start time (time:hasBeginning) must be after latest end time (time:hasEnd) of the entity it follows via 'time:after'."@en ;
            sh:severity sh:Violation
        ] .

    # Shape for occp:beginsBefore constraints
    osh:BeginsBeforeTimeShape a sh:NodeShape ;
        sh:targetClass time:TemporalEntity ;
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this ?other
                WHERE {
                    $this occp:beginsBefore ?other .
                    {
                        SELECT $this (MAX(?startTime) AS ?latestStartTime)
                        WHERE {
                            $this time:hasBeginning ?startInstant .
                            ?startInstant occp:hasActualTime ?startTime .
                        }
                        GROUP BY $this
                        HAVING (BOUND(?latestStartTime))
                    }
                    {
                        SELECT ?other (MIN(?startTime) AS ?earliestStartTime)
                        WHERE {
                            ?other time:hasBeginning ?startInstant .
                            ?startInstant occp:hasActualTime ?startTime .
                        }
                        GROUP BY ?other
                        HAVING (BOUND(?earliestStartTime))
                    }
                    FILTER (?latestStartTime >= ?earliestStartTime)
                }
            """ ;
            sh:message "For 'time:TemporalEntity': Latest start time (time:hasBeginning) must be before earliest start time of the entity it precedes via 'occp:beginsBefore'."@en ;
            sh:severity sh:Violation
        ] .

    # Shape for occp:endsBefore constraints
    osh:EndsBeforeTimeShape a sh:NodeShape ;
        sh:targetClass time:TemporalEntity ;
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this ?other
                WHERE {
                    $this occp:endsBefore ?other .
                    {
                        SELECT $this (MAX(?endTime) AS ?latestEndTime)
                        WHERE {
                            $this time:hasEnd ?endInstant .
                            ?endInstant occp:hasActualTime ?endTime .
                        }
                        GROUP BY $this
                        HAVING (BOUND(?latestEndTime))
                    }
                    {
                        SELECT ?other (MIN(?endTime) AS ?earliestEndTime)
                        WHERE {
                            ?other time:hasEnd ?endInstant .
                            ?endInstant occp:hasActualTime ?endTime .
                        }
                        GROUP BY ?other
                        HAVING (BOUND(?earliestEndTime))
                    }
                    FILTER (?latestEndTime >= ?earliestEndTime)
                }
            """ ;
            sh:message "For 'time:TemporalEntity': Latest end time (time:hasEnd) must be before earliest end time of the entity it precedes via 'occp:endsBefore'."@en ;
            sh:severity sh:Violation
        ] .

    # Shape for occp:endsAfter constraints
    osh:EndsAfterTimeShape a sh:NodeShape ;
        sh:targetClass time:TemporalEntity ;
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this ?other
                WHERE {
                    $this occp:endsAfter ?other .
                    {
                        SELECT $this (MIN(?endTime) AS ?earliestEndTime)
                        WHERE {
                            $this time:hasEnd ?endInstant .
                            ?endInstant occp:hasActualTime ?endTime .
                        }
                        GROUP BY $this
                        HAVING (BOUND(?earliestEndTime))
                    }
                    {
                        SELECT ?other (MAX(?endTime) AS ?latestEndTime)
                        WHERE {
                            ?other time:hasEnd ?endInstant .
                            ?endInstant occp:hasActualTime ?endTime .
                        }
                        GROUP BY ?other
                        HAVING (BOUND(?latestEndTime))
                    }
                    FILTER (?earliestEndTime <= ?latestEndTime)
                }
            """ ;
            sh:message "For 'time:TemporalEntity': Earliest end time (time:hasEnd) must be after latest end time of the entity it follows via 'occp:endsAfter'."@en ;
            sh:severity sh:Violation
        ] .

    # Shape for occp:beginsWith constraints
    osh:BeginsWithTimeShape a sh:NodeShape ;
        sh:targetClass time:TemporalEntity ;
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this ?other
                WHERE {
                    $this occp:beginsWith ?other .
                    {
                        SELECT $this (MIN(?startTime) AS ?startTimeThis)
                        WHERE {
                            $this time:hasBeginning ?startInstant .
                            ?startInstant occp:hasActualTime ?startTime .
                        }
                        GROUP BY $this
                        HAVING (BOUND(?startTimeThis))
                    }
                    {
                        SELECT ?other (MIN(?startTime) AS ?startTimeOther)
                        WHERE {
                            ?other time:hasBeginning ?startInstant .
                            ?startInstant occp:hasActualTime ?startTime .
                        }
                        GROUP BY ?other
                        HAVING (BOUND(?startTimeOther))
                    }
                    FILTER (?startTimeThis != ?startTimeOther)
                }
            """ ;
            sh:message "For 'time:TemporalEntity': Earliest start time (time:hasBeginning) must equal the earliest start time of the entity it begins with via 'occp:beginsWith'."@en ;
            sh:severity sh:Violation
        ] .

    # Shape for occp:endsWith constraints
    osh:EndsWithTimeShape a sh:NodeShape ;
        sh:targetClass time:TemporalEntity ;
        sh:sparql [
            sh:select """
                PREFIX occp: <http://www.semanticweb.org/albrechtvaatz/ontologies/2022/9/cMod_V0.1#>
                PREFIX time: <http://www.w3.org/2006/time#>
                SELECT $this ?other
                WHERE {
                    $this occp:endsWith ?other .
                    {
                        SELECT $this (MAX(?endTime) AS ?endTimeThis)
                        WHERE {
                            $this time:hasEnd ?endInstant .
                            ?endInstant occp:hasActualTime ?endTime .
                        }
                        GROUP BY $this
                        HAVING (BOUND(?endTimeThis))
                    }
                    {
                        SELECT ?other (MAX(?endTime) AS ?endTimeOther)
                        WHERE {
                            ?other time:hasEnd ?endInstant .
                            ?endInstant occp:hasActualTime ?endTime .
                        }
                        GROUP BY ?other
                        HAVING (BOUND(?endTimeOther))
                    }
                    FILTER (?endTimeThis != ?endTimeOther)
                }
            """ ;
            sh:message "For 'time:TemporalEntity': Latest end time (time:hasEnd) must equal the latest end time of the entity it ends with via 'occp:endsWith'."@en ;
            sh:severity sh:Violation
        ] .